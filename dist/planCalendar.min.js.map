{"version":3,"sources":["planCalendar.es6.js"],"names":["root","factory","define","amd","exports","_typeof","module","PlanCalendar","appendZero","num","getType","format","date","rule","d","obj2Str","Date","r","yyyy","mm","getMonth","dd","getDate","seps","match","mapAssignObj","obj1","obj2","obj","Object","prototype","toString","call","hasClass","className","includes","addClass","el","cls","parentNode","removeClass","re","RegExp","replace","options","_classCallCheck","this","$el","node","nodeType","document","querySelector","$options","i","monthNum","showExpiredData","minPriceText","maxNum","maxNumText","defineNumText","markDates","disableDates","data","onMouseEnter","optimizeData","startByData","onMouseLeave","$startDate","$data","length","$seletedDate","_createClass","key","value","time","initCalendar","getTime","sortDates","reduce","prevVal","curVal","push","sort","min","max","startTime","_this2","year","split","getFullYear","month","monthActiveIndex","createElem","$next","getCalMonthHtml","getCalWeek","$month","getCalDateHtml","on","parent","targetNode","childNodes","forEach","getAttribute","$date","getPlanDateData","nextSibling","click","related","curDate","trim","$prev","addEventListener","previousSibling","eventType","_this","elem","innerHTML","callback","childSelector","createElement","event","getTargetNode","selector","nodeName","toLowerCase","substring","id","html","target","srcElement","relatedTarget","uniqueData","tag","getUniqueData","dates","sellOutText","price","toNumText","number","type","indexOf","prevArr","arguments","calDateData","filter","status","getPlanDateHtml","getCalDateData","dateString","getDay","dateText","disabledClass","isDisabled","selectClass","invalidClass","week","isToday","febDays","endDateIndex","startDateIndex","monthDays","getCurDate","todayClass","prevMonth","prevYear","undefined","nextMonth","nextYear","index","minPrice","yy","minPriceTxt","weekCn","getMinPrice","end","dateTime","start","console","filterData","map"],"mappings":"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","file":"planCalendar.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    exports = module.exports = factory();\n  } else {\n    root.PlanCalendar = factory();\n  }\n})(this ? this : window, function() {\n  class PlanCalendar {\n    constructor(el, options) {\n      // 默认值\n      const defaults = {\n        monthNum: 4, // Number 默认值 4，月份显示个数\n        startByData: false, // Boolean 根据传入数据的最小日期指定第一个月的显示\n        showExpiredData: false, // Boolean 默认值 false，是否渲染今天以前的数据; 当showExpiredData值为true时，startByData 设置true将失效\n        minPriceText: '无团期', // String, 默认值 无团期， 当月最小价格为0 时显示文字\n        sellOutText: '售罄', // String 默认值 '售罄'，余位为0时显示文字\n        maxNum: 20, // Number  默认值 20，大于等于指定余位显示 maxNumText 的值\n        maxNumText: '充足', // String  默认值 '充足'，配置大于等于指定余位显示文字\n        defineNumText: '', // String 默认值： '', 自定义数量显示，若设置，权重最高，maxNumText 会失效\n        markDates: [], // Array  默认值 []， 格式化好的团期数据\n        disableDates: [], // // 禁选团期，只禁用含团的日期，Array 指定日期 | Object 时间范围，start/end，\n        onSelect: function(data) {\n          // 选择团期之后的回调, data[Array]: 团期数据\n        },\n        onMouseEnter: function(data) {\n          // 鼠标移入含团日期回调， data[Array]: 团期数据，ps：必须为当月，上月或下月将不触发\n        },\n        onMouseLeave: function() {\n          // 鼠标离开当月日期项之后的回调\n        }\n      };\n\n      this.$el = isNodeElement(el) ? el : document.querySelector(el);\n      this.$options = mapAssignObj(defaults, options); // 初始化参数\n      this.$data = this.optimizeData();\n      // 当showExpiredData值为true时，startByData 设置true将失效\n      this.$options.startByData =\n        this.$options.startByData && !this.$options.showExpiredData;\n      this.$startDate =\n        this.$data.length > 0 ? this.$data[0].date : format(new Date()); // 第一个含数据的日期\n      this.$seletedDate = ''; // 已选日期\n      // 标准化数据中的日期 yyyy-mm-dd\n      this.initCalendar();\n    }\n    // 优化传入数据\n    optimizeData() {\n      const time = new Date();\n      const startTime = new Date(\n        time.getFullYear(),\n        time.getMonth(),\n        time.getDate()\n      ).getTime();\n      const markDates = this.$options.markDates.reduce((prevVal, curVal) => {\n        curVal.date = format(new Date(curVal.date));\n        prevVal.push(curVal);\n        return prevVal;\n      }, []);\n      const sortDates = markDates.sort((min, max) => {\n        return new Date(min.date).getTime() - new Date(max.date).getTime();\n      });\n      return this.$options.showExpiredData\n        ? sortDates\n        : sortDates.filter(curVal => {\n            // 过滤今天以前的数据\n            return startTime <= new Date(curVal.date).getTime();\n          });\n    }\n    initCalendar() {\n      const options = this.$options;\n\n      let year = options.startByData\n        ? +this.$startDate.split('/')[0]\n        : new Date().getFullYear();\n      let month = options.startByData\n        ? +this.$startDate.split('/')[1] - 1\n        : new Date().getMonth();\n      let monthActiveIndex = 0;\n\n      const $prev = this.createElem('span', 'calendar-btn-prev', '&lt;');\n      const $next = this.createElem('span', 'calendar-btn-next', '&gt;');\n      const $month = this.createElem(\n        'ul',\n        'calendar-month',\n        this.getCalMonthHtml(year, month, monthActiveIndex)\n      );\n      this.createElem('ul', 'calendar-week', this.getCalWeek());\n      const $date = this.createElem(\n        'ul',\n        'calendar-date',\n        this.getCalDateHtml(year, month)\n      );\n\n      // 切换月\n      this.on('click', $month, 'li', (parent, targetNode) => {\n        parent.childNodes.forEach(curVal => removeClass(curVal, 'active'));\n        addClass(targetNode, 'active');\n        for (let i = 0; i < parent.childNodes.length; i++) {\n          if (parent.childNodes[i] === targetNode) {\n            monthActiveIndex = i;\n            break;\n          }\n        }\n        year = +targetNode.getAttribute('data-year');\n        month = +targetNode.getAttribute('data-month') - 1;\n        $date.innerHTML = this.getCalDateHtml(year, month);\n      });\n\n      // 选择含团日期\n      this.on('click', $date, '.enabled', (parent, targetNode) => {\n        // 移除所有元素样式类.selected\n        parent.childNodes.forEach(curVal => removeClass(curVal, 'selected'));\n        addClass(targetNode, 'selected');\n        this.$seletedDate = targetNode.getAttribute('data-date');\n        options.onSelect(this.getPlanDateData(this.$seletedDate));\n        if (targetNode.className.includes('prev')) {\n          $month.childNodes[monthActiveIndex].previousSibling.click();\n        }\n        if (targetNode.className.includes('next')) {\n          $month.childNodes[monthActiveIndex].nextSibling.click();\n        }\n      });\n      // 鼠标移入含团日期\n      this.on('mouseover', $date, '.enabled', (parent, targetNode, related) => {\n        const curDate = targetNode.getAttribute('data-date');\n        if (\n          related !== targetNode &&\n          !targetNode.contains(related) &&\n          (targetNode.className.trim() === 'enabled' ||\n            targetNode.className.includes('selected'))\n        ) {\n          options.onMouseEnter(this.getPlanDateData(curDate));\n        }\n      });\n      // 鼠标移出含团日期\n      this.on('mouseout', $date, '.enabled', (parent, targetNode, related) => {\n        if (\n          related !== targetNode &&\n          !targetNode.contains(related) &&\n          (targetNode.className.trim() === 'enabled' ||\n            targetNode.className.includes('selected'))\n        ) {\n          options.onMouseLeave();\n        }\n      });\n      // 切换至上月\n      $prev.addEventListener('click', () => {\n        year = month === 0 ? --year : year;\n        month = month === 0 ? 11 : --month;\n        if (monthActiveIndex === 0) {\n          monthActiveIndex = 0;\n          $month.innerHTML = this.getCalMonthHtml(\n            year,\n            month,\n            monthActiveIndex\n          );\n          $date.innerHTML = this.getCalDateHtml(year, month);\n        } else {\n          $month.childNodes[monthActiveIndex].previousSibling.click();\n        }\n      });\n      // 切换至下月\n      $next.addEventListener('click', () => {\n        year = month === 11 ? ++year : year;\n        month = month === 11 ? 0 : ++month;\n        if (monthActiveIndex === options.monthNum - 1) {\n          monthActiveIndex = 0;\n          $month.innerHTML = this.getCalMonthHtml(\n            year,\n            month,\n            monthActiveIndex\n          );\n          $date.innerHTML = this.getCalDateHtml(year, month);\n        } else {\n          $month.childNodes[monthActiveIndex].nextSibling.click();\n        }\n      });\n    }\n    // 事件委托\n    on(eventType, elem, childSelector, callback) {\n      const _this = this;\n      elem.addEventListener(eventType, function(event) {\n        const target = event.target || event.srcElement;\n        const targetNode = getTargetNode(target, this, childSelector);\n        const related = event.relatedTarget;\n\n        if (targetNode) {\n          callback && callback(this, targetNode, related);\n        }\n      });\n    }\n    createElem(tag, cls, html) {\n      const elem = document.createElement(tag);\n      elem.className = cls;\n      elem.innerHTML = html;\n      this.$el.append(elem);\n      return elem;\n    }\n    getPlanDate(year, month, date) {\n      const options = this.$options;\n      const uniqueData = this.getUniqueData();\n\n      // 返回团期对应\n      for (let i = 0; i < uniqueData.length; i++) {\n        if (format(new Date(year, month, date)) === uniqueData[i].date) {\n          let badge =\n            this.getPlanDateData(year, month, date).length > 1\n              ? '<i class=\"badge\">多团</i>'\n              : uniqueData[i].number === 0\n                ? `<i class=\"badge\">${options.sellOutText}</i>`\n                : '';\n          return `${badge}\n            <p class=\"price\">&yen;${uniqueData[i].price}起</p>\n            <p class=\"number\">${this.toNumText(uniqueData[i].number)}</p>`;\n        }\n      }\n    }\n    // 获取去重后的数据对象，默认返回含对象的数组，当type = date 时返回['2018/08/25,2018/08/21']\n    getUniqueData(type) {\n      const dates = []; // 过滤团期使用的中间数组\n      // 获取日期去重数据\n      const uniqueData = this.$data\n        .sort((min, max) => {\n          return min.price - max.price;\n        })\n        .reduce((prevArr, curVal) => {\n          if (dates.indexOf(curVal.date) === -1) {\n            prevArr.push(curVal);\n            dates.push(curVal.date);\n          }\n          return prevArr;\n        }, []);\n\n      return type === 'date' ? dates : uniqueData;\n    }\n    // 获取指定日期团期数据，返回值数组\n    getPlanDateData(...dates) {\n      const curDate =\n        dates.length === 1\n          ? format(new Date(dates[0]))\n          : format(new Date(dates[0], dates[1], dates[2]));\n\n      return this.$data\n        .filter(curVal => {\n          return curVal.date === curDate;\n        })\n        .sort((min, max) => {\n          return min.price - max.price;\n        });\n    }\n    getCalDateHtml(year, month) {\n      let t = new Date();\n      let html = '';\n\n      const options = this.$options;\n      const calDateData = this.getCalDateData(year, month);\n      const uniqueData = this.getUniqueData('date');\n\n      for (let i = 0; i < calDateData.length; i++) {\n        if (calDateData[i].status === 'prev') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'prev');\n        } else if (calDateData[i].status === 'current') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'current');\n        } else if (calDateData[i].status === 'next') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'next');\n        }\n      }\n      return html;\n    }\n    getPlanDateHtml(dateString, type) {\n      const uniqueData = this.getUniqueData('date');\n      const year = +dateString.split('/')[0];\n      const month = +dateString.split('/')[1] - 1;\n      const date = +dateString.split('/')[2];\n      const week = new Date(dateString).getDay();\n      const dateText = this.isToday(year, month, date);\n      const disabledClass = this.isDisabled(dateString)\n        ? 'disabled'\n        : 'enabled';\n      const selectClass = this.$seletedDate === dateString ? 'selected' : '';\n      const invalidClass = type !== 'current' ? `invalid ${type}` : '';\n      const todayClass = dateText === '今天' ? 'today' : '';\n\n      if (uniqueData.indexOf(dateString) !== -1) {\n        return `<li class=\"${disabledClass} ${selectClass} ${invalidClass} ${todayClass}\" data-date=\"${dateString}\" data-week=\"${week}\">\n            <p class=\"date\">${dateText}</p>\n            ${this.getPlanDate(year, month, date)}\n          </li>`;\n      }\n      return `<li class=\"${invalidClass} ${todayClass}\" data-date=\"${dateString}\" data-week=\"${week}\"><p class=\"date\">${dateText}</p></li>`;\n    }\n    getCalDateData(year, month) {\n      const febDays =\n        (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 ? 29 : 28; // 平年和闰年二月份天数\n      const monthDays = [31, febDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      const startDateIndex = new Date(year, month, 1).getDay();\n      const endDateIndex = startDateIndex + (monthDays[month] - 1);\n      const getCurDate = ((num = 0) => () => ++num)(); // 累加计数器\n      const calDateData = [];\n      for (let i = 0; i < 42; i++) {\n        if (i < startDateIndex) {\n          // 获取上月数据\n          // 处理跨年, 月变11，年减1\n          let prevMonth = month === 0 ? 11 : month - 1;\n          let prevYear = month === 0 ? year - 1 : year;\n          let d = monthDays[prevMonth] - (startDateIndex - 1 - i);\n          let curDate = format(new Date(prevYear, prevMonth, d));\n          calDateData.push({ date: curDate, status: 'prev' });\n        } else if (i >= startDateIndex && i <= endDateIndex) {\n          // 获取当月数据\n          let d = i - startDateIndex + 1;\n          let curDate = format(new Date(year, month, d));\n          calDateData.push({ date: curDate, status: 'current' });\n        } else {\n          // 获取下月数据\n          // 处理跨年，月变0，年加1\n          let nextMonth = month === 11 ? 0 : month + 1;\n          let nextYear = month === 11 ? year + 1 : year;\n          let curDate = format(new Date(nextYear, nextMonth, getCurDate()));\n          calDateData.push({ date: curDate, status: 'next' });\n        }\n      }\n\n      return calDateData;\n    }\n    getCalMonthHtml(year, month, index) {\n      let html = '';\n      let yy = year;\n      let mm = month;\n      for (let i = 0; i < this.$options.monthNum; i++) {\n        mm = month + i;\n        if (month + i > 11) {\n          yy = year + 1;\n          mm = month + i - 12;\n        }\n\n        let minPrice = this.getMinPrice(yy, mm);\n        let minPriceTxt =\n          minPrice === this.$options.minPriceText\n            ? minPrice\n            : `&yen;${minPrice}起`;\n\n        html += `<li data-year=\"${yy}\" data-month=\"${mm + 1}\" class=\"item \n          ${i === index ? 'active' : ''}\">\n          <p class=\"month\">${yy}年${mm + 1}月</p>\n          <p class=\"${\n            minPrice === this.$options.minPriceText ? 'none' : 'price'\n          }\">${minPriceTxt}</p>\n        </li>`;\n      }\n      return html;\n    }\n    getCalWeek() {\n      const weekCn = ['日', '一', '二', '三', '四', '五', '六'];\n      let html = '';\n\n      for (let i = 0; i < weekCn.length; i++) {\n        html += `<li>${weekCn[i]}</li>`;\n      }\n      return html;\n    }\n    toNumText(num) {\n      const options = this.$options;\n      if (options.defineNumText) {\n        return options.defineNumText;\n      } else if (num >= options.maxNum) {\n        return options.maxNumText;\n      } else {\n        return '余：' + num;\n      }\n      // return num < options.maxNum ? '余：' + num : options.maxNumText;\n    }\n    isDisabled(date) {\n      const disableDates = this.$options.disableDates;\n\n      if (getType(disableDates) === 'array') {\n        if (disableDates.length === 0) return false;\n        const dates = disableDates.map(curVal => format(curVal));\n        return dates.indexOf(date) === -1 ? false : true;\n      } else {\n        const dateTime = new Date(date).getTime();\n\n        const start = disableDates.start\n          ? new Date(format(disableDates.start)).getTime()\n          : new Date().getTime();\n        const end = disableDates.end\n          ? new Date(format(disableDates.end)).getTime()\n          : new Date().getTime();\n        if (end - start <= 0) {\n          console.warn('disableDates的start日期不能大于end日期');\n          return false;\n        } else {\n          return dateTime >= start && dateTime <= end ? true : false;\n        }\n      }\n    }\n    // 获取数组中的最低价\n    getMinPrice(year, month, date) {\n      // 获取指定日期最低价格\n      if (date) return this.getPlanDateData(year, month, date)[0];\n      // 获取指定月最低价格\n      if (this.$data.length === 0) return this.$options.minPriceText;\n      // 根据年月日过滤数据\n      const filterData = this.$data.filter(curVal => {\n        return (\n          +curVal.date.split('/')[0] === year &&\n          +curVal.date.split('/')[1] === month + 1\n        );\n      });\n      // 返回已过滤数组中的最小价格\n      return filterData.length !== 0\n        ? filterData\n            .map(curVal => {\n              return curVal.price;\n            })\n            .sort((min, max) => {\n              return min - max;\n            })[0]\n        : this.$options.minPriceText;\n    }\n    getStart(type) {\n      const time = new Date();\n      const startTime = new Date(\n        time.getFullYear(),\n        time.getMonth(),\n        time.getDate()\n      ).getTime();\n      if (this.$options.startByData) {\n      }\n    }\n    isToday(year, month, date) {\n      const t = new Date();\n      return new Date(year, month, date).getTime() ===\n        new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime()\n        ? '今天'\n        : date;\n    }\n  }\n  // 数字小于10追加 0\n  function appendZero(num) {\n    return num >= 10 ? num : '0' + num;\n  }\n  // 格式化日期, date 日期对象|时间戳|日期字符串，rule 结果日期格式如yyyy-mm-dd\n  function format(date, rule) {\n    const d = getType(date) === 'date' ? date : new Date(date);\n    const r = rule ? rule : 'yyyy/mm/dd';\n    const yyyy = d.getFullYear();\n    const mm = appendZero(d.getMonth() + 1);\n    const dd = appendZero(d.getDate());\n    const seps = r.match(/[-/\\s年月日]/g);\n\n    return `${yyyy}${seps[0]}${mm}${seps[1]}${dd}${seps[2] ? seps[2] : ''}`;\n  }\n  // 判断是否为元素节点\n  function isNodeElement(node) {\n    return node.nodeType === 1;\n  }\n  // 获取数据类型\n  function getType(obj) {\n    const obj2Str = Object.prototype.toString;\n    if (obj2Str.call(obj) === '[object Array]') {\n      return 'array';\n    } else if (obj2Str.call(obj) === '[object Object]') {\n      return 'object';\n    } else if (obj2Str.call(obj) === '[object Date]') {\n      return 'date';\n    }\n  }\n  // 遍历赋值对象, obj1 默认对象，obj2 赋值对象\n  function mapAssignObj(obj1, obj2) {\n    for (let i in obj1) {\n      if (typeof obj2[i] === 'undefined') {\n        obj2[i] = obj1[i];\n      } else if (getType(obj2[i]) === 'object') {\n        mapAssignObj(obj1[i], obj2[i]);\n      }\n    }\n    return obj2;\n  }\n  function hasClass(el, cls) {\n    return el.className.includes(cls);\n  }\n  function addClass(el, cls) {\n    if (!hasClass(el, cls)) {\n      el.className += ' ' + cls;\n    }\n  }\n  function removeClass(el, cls) {\n    if (hasClass(el, cls)) {\n      const re = new RegExp(`(\\\\s|^)${cls}`);\n      el.className = el.className.replace(re, '');\n    }\n  }\n  function getTargetNode(node, parent, selector) {\n    if (node.parentNode.nodeName === 'BODY') return null;\n    if (node.parentNode === parent) {\n      if (\n        node.nodeName.toLowerCase() === selector ||\n        node.className.includes(selector.substring(1)) ||\n        node.id.includes(selector.substring(1))\n      ) {\n        return node;\n      }\n      return null;\n    }\n    return node.parentNode !== parent\n      ? getTargetNode(node.parentNode, parent, selector)\n      : null;\n  }\n\n  return PlanCalendar;\n});\n"]}