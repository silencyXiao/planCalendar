{"version":3,"sources":["planCalendar.js"],"names":["root","factory","define","amd","exports","_typeof","module","require","PlanCalendar","jQuery","window","$","options","arguments","length","undefined","_classCallCheck","this","defaults","sellOutText","maxNum","maxNumText","onSelect","elem","dataIndex","initTips","isTips","i","markDates","j","dateItem","data","monthNum","selectedDate","$cal","html","$calMonth","children","$calDate","weekCn","_ref","now","getMonth","getDate","m","d","getCalMonth","y","on","index","Date","mm","getFullYear","that","getCalDate","yy","selectCalDate","_createClass","key","value","_len","addClass","Array","_key","date","indexOf","t","join","days","formatDate","year","month","_this","filter","curVal","dates","split","parseInt","prices","minPrice","map","price","sort","$item","_this2","op","forEach","priceHtml","number","attr","getEndDate","append","dataHtml","hasClass","_this3","getDay","mNum","mHtml","getMinPrice","monthDays","nextMonthDate","startDate","endDate","$calDateItem","curDate","renderPlanData","eq","prevMonth","prevYear","febDays","nextYear","nextMonth","calGridNum","_this4","$curMonthItem","curMonth","obj","siblings","renderCalDate","prev","click","$selectedItem","callback"],"mappings":"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","file":"planCalendar.min.js","sourcesContent":[";(function(root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    root.PlanCalendar = factory(root.jQuery);\r\n  }\r\n})(this ? this : window, function($) {\r\n  class PlanCalendar {\r\n    constructor(elem, options = {}) {\r\n      const defaults = {\r\n        monthNum: 4, // Number 默认值 4，月份显示个数\r\n        sellOutText: '售罄', // String 默认值 '售罄'，余位为0时显示文字\r\n        isTips: false, // Boolean 默认值 false，是否显示提示层 \r\n        maxNum: 20, // Number  默认值 20，大于等于指定余位显示 maxNumText 的值\r\n        maxNumText: '充足', // String  默认值 '充足'，配置大于等于指定余位显示文字\r\n        markDates: [], // Array  默认值 []， 格式化好的团期数据        \r\n        onSelect: function (dateItem, dataIndex) { // 选择团期之后的回调，dateItem：选中日期项, dataIndex: 数据的索引值\r\n        },\r\n        initTips: function (dataIndex) { // 初始化tips文档内容，dataIndex: 数据的索引值\r\n          // return String 文档内容\r\n        }\r\n\r\n      };\r\n      for (var i in defaults) {\r\n        if (typeof options[i] === 'undefined') {\r\n          options[i] = defaults[i];\r\n        } else if (typeof options[i] === 'object') {\r\n          for (var j in options[i]) {\r\n            if (typeof options[i][j] === 'undefined') {\r\n              options[i][j] = defaults[i][j];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.options = options;\r\n      this.data = this.options.markDates;\r\n      this.options.monthNum = this.options.monthNum > 11 ? 11 : this.options.monthNum; // 选项卡个数不能超过11个\r\n      // 已选日期\r\n      this.selectedDate = undefined;\r\n      // 日历dom结构\r\n      this.$cal = $(elem);\r\n      this.$cal.html('<ul class=\"calendar-month\"> </ul> <ul class=\"calendar-week\"> <li>日</li> <li>一</li> <li>二</li> <li>三</li> <li>四</li> <li>五</li> <li>六</li> </ul> <ul class=\"calendar-date\"> </ul>');\r\n      this.$calMonth = this.$cal.children('.calendar-month');\r\n      this.$calDate = this.$cal.children('.calendar-date');\r\n      this.weekCn = ['日', '一', '二', '三', '四', '五', '六'];\r\n      // 获取当前时间\r\n      const now = new Date();\r\n      const [y, m, d] = [now.getFullYear(), now.getMonth(), now.getDate()];\r\n\r\n      this.getCalMonth(y, m, this.options.monthNum);\r\n      this.getCalDate(y, m, d);\r\n\r\n      const that = this;\r\n      this.$calMonth.on('click', 'li', function () {\r\n        $(this).addClass('active')\r\n          .siblings()\r\n          .removeClass('active');\r\n        let index = $(this).index();\r\n        let yy = m + index > 11 ? (y + 1) : y;\r\n        let mm = m + index > 11 ? (m - 12 + index) : (m + index);\r\n        that.getCalDate(yy, mm);\r\n      });\r\n      this.$calDate.on('click', 'li.enabled', function () {\r\n        that.selectCalDate(this, that.options.onSelect);\r\n      });\r\n    }\r\n    /**\r\n     * 格式化化日\r\n     * 统一返回： YY-MM-DD\r\n     */\r\n    formatDate(...date) {\r\n      if (typeof date[0] === 'string' && date[0].indexOf('-') !== -1 && date[0].length === 8) {\r\n        return date[0];\r\n      }\r\n      const t = date.length === 3 ? new Date(date[0], date[1], date[2]) : new Date(date[0]);\r\n      let m = (t.getMonth() + 1) < 10 ? ('0' + (t.getMonth() + 1)) : (t.getMonth() + 1);\r\n      let d = t.getDate() < 10 ? ('0' + t.getDate()) : t.getDate();\r\n      const dates = [t.getFullYear(), m, d];\r\n\r\n      return dates.join('-');\r\n    }\r\n    /**\r\n     * 获取指定日期指定天数之后的结束日期\r\n     * @param {* string} date 开始日期 yy-mm-dd\r\n     * @param {* number} days 天数\r\n     */\r\n    getEndDate(date, days) {\r\n      const t = new Date(date);\r\n      return this.formatDate(t.getFullYear(), t.getMonth(), t.getDate() + days);\r\n    }\r\n    /**\r\n     * 获取指定月下在团期数据中的价格最小值，\r\n     * 若该月无团则显示为“无团期”\r\n     */\r\n    getMinPrice(year, month) {\r\n      if (this.data.length === 0) {\r\n        return '<p class=\"none\">无团期</p>';\r\n      }\r\n      const prices = this.data.filter((curVal) => {\r\n        return (this.formatDate(curVal.date).split('-')[0] == year &&\r\n          parseInt(this.formatDate(curVal.date).split('-')[1]) == month)\r\n      });\r\n      if (prices.length === 0) {\r\n        return '<p class=\"none\">无团期</p>';\r\n      }\r\n      const minPrice = prices.map((curVal) => {\r\n        return curVal.price;\r\n      }).sort()[0];\r\n      let priceHtml = minPrice ?\r\n        `<p class=\"price\">&yen;${minPrice}起</p>` :\r\n        `<p class=\"price\">未设置</p>`\r\n      return priceHtml;\r\n    }\r\n    /**\r\n     * 渲染日期项中的团期数据\r\n     * @param {* object}  jQuery 对象，日历表格项\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份\r\n     * @param {* number} date 当前日期\r\n     */\r\n    renderPlanData($item, year, month, date) {\r\n      const op = this.options;\r\n      const toNumTxt = (number) => {\r\n        if (number < op.maxNum) {\r\n          return '余：' + number;\r\n        } else if (number >= op.maxNum) {\r\n          return op.maxNumText;\r\n        } else {\r\n          return '';\r\n        }\r\n      };\r\n      // 输出对应日期的团期数据\r\n      this.data.forEach((curVal, i) => {\r\n        if (this.formatDate(curVal.date) === this.formatDate(year, month, date)) {\r\n          let priceHtml = typeof curVal.price === 'undefined' ?\r\n            '' :\r\n            `<p class=\"price\">&yen;${curVal.price}起</p>`;\r\n          let dataHtml = `${ priceHtml }<p class=\"number\">${ toNumTxt(curVal.number) }</p>`;\r\n\r\n          $item.addClass('enabled')\r\n            .attr('data-start', this.formatDate(curVal.date))\r\n            .attr('data-end', this.getEndDate(curVal.date, curVal.days))\r\n            .append(dataHtml);\r\n          if (this.formatDate(curVal.date) === this.selectedDate) {\r\n            $item.addClass('selected');\r\n          }\r\n          if (typeof curVal.number !== 'undefined' && curVal.number === 0) {\r\n            $item.append(`<i class=\"badge\">${this.options.sellOutText}</i>`);\r\n          }\r\n          if (this.options.isTips && this.options.initTips !== 'undefined' && !$item.hasClass('invalid')) {\r\n            $item.append(this.options.initTips(i));\r\n          }\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * 渲染网格中的日期\r\n     * @param {* object}  jQuery 对象，日历表格项\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份\r\n     * @param {* number} date 当前日期\r\n     */\r\n    renderCalDate($item, year, month, date) {\r\n      $item.attr('data-date', () => {\r\n          return this.formatDate(year, month, date);\r\n        })\r\n        .attr('data-week', () => {\r\n          return this.weekCn[new Date(year, month, date).getDay()];\r\n        })\r\n        .html(`<p class=\"date\">${ date }</p>`);\r\n    }\r\n    /**\r\n     * 获取指定年配置的所有月份\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份\r\n     * @param {* number} mNum 月份选项卡数量\r\n     */\r\n    getCalMonth(year, month, mNum) {\r\n      let mHtml = '';\r\n      for (let i = 0; i < mNum; i++) {\r\n        if (month + i > 11) { //\r\n          year++;\r\n          month = -i;\r\n        }\r\n        let m = month + 1 + i;\r\n        mHtml += `<li data-year=\"${year}\"  data-month=\"${m}\" class=\"${ i===0 ? 'active' : '' }\"><p class=\"month\">${year}年${m }月</p>${ this.getMinPrice(year, m) }</li>`;\r\n      }\r\n      this.$calMonth.html(mHtml);\r\n    }\r\n    /**\r\n     * 获取指定年月所有日期，以及部分上下月日期\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份 \r\n     * @param {* number} date 当前日期，默认值=1 \r\n     */\r\n    getCalDate(year, month, date) {\r\n      let data = this.data;\r\n      let now = new Date();\r\n      let y = year;\r\n      let m = month;\r\n      let d = date ? date : now.getDate();\r\n      let febDays = (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0) ? 29 : 28; //闰年二月份天数\r\n      const monthDays = [31, febDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n      const calGridNum = 42; //日历网格个数\r\n      let nextMonthDate = 0; //下一个月的日期\r\n      let startDate = new Date(y, m, 1).getDay(); //当月第一天\r\n      let endDate = startDate + monthDays[m]; //当月最后一天\r\n      // 初始化日期表格\r\n      this.$calDate.html('');\r\n      for (let i = 0; i < calGridNum; i++) {\r\n        this.$calDate.append('<li></li>');\r\n      }\r\n      let $calDateItem = this.$calDate.children('li');\r\n      $calDateItem.removeAttr('class');\r\n      for (let i = 0; i < calGridNum; i++) {\r\n        // 显示当月\r\n        if (i >= startDate && i < endDate) {\r\n          let curDate = i - (startDate - 1);\r\n          // 日期插入网格中\r\n          this.renderCalDate($calDateItem.eq(i), y, m, curDate);\r\n          this.renderPlanData($calDateItem.eq(i), y, m, curDate);\r\n          // 显示今天\r\n          if (y === now.getFullYear() && m === now.getMonth() && d === curDate) {\r\n            $calDateItem.eq(i).addClass('today')\r\n              .children('.date').html('今天');\r\n          }\r\n        } else if (i < startDate) { // 显示上月\r\n          let prevMonth = m === 0 ? 11 : (m - 1); // 跨年时，当m=0时, prevMonth=11;\r\n          let prevYear = m === 0 ? (y - 1) : y; // 跨年时，当m=0时, prevYear=y-1;\r\n\r\n          for (let j = monthDays[prevMonth]; j > monthDays[prevMonth] - startDate; j--) {\r\n            if (i === monthDays[prevMonth] - j) {\r\n              let curDate = monthDays[prevMonth] - ((startDate - 1) - i); // 获取当天日期\r\n              $calDateItem.eq(i).addClass('invalid');\r\n              // 日期插入网格中\r\n              this.renderCalDate($calDateItem.eq(i), prevYear, prevMonth, curDate);\r\n              // 输出对应日期的团期数据\r\n              this.renderPlanData($calDateItem.eq(i), prevYear, prevMonth, curDate);\r\n              break;\r\n            }\r\n          }\r\n        } else {\r\n          let data = this.data;\r\n          let nextMonth = m === 11 ? 0 : (m + 1);\r\n          let nextYear = m === 11 ? (y + 1) : y;\r\n          let curDate = ++nextMonthDate; // 获取当天日期\r\n\r\n          $calDateItem.eq(i).addClass('invalid');\r\n          // 日期插入网格中\r\n          this.renderCalDate($calDateItem.eq(i), nextYear, nextMonth, curDate);\r\n          // 输出对应日期的团期数据\r\n          this.renderPlanData($calDateItem.eq(i), nextYear, nextMonth, curDate);\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * \r\n     * @param {* object} obj dom 对象\r\n     * @param {* function } callback 回调，参数：dateItem 已选日期项；dataIndex： 团期数据索引\r\n     */\r\n    selectCalDate(obj, callback) {\r\n\r\n      let curDate = $(obj).attr('data-date');\r\n      let $curMonthItem = this.$calMonth.children('li.active');\r\n      let curMonth = ($curMonthItem.attr('data-month') - 1);\r\n      let prevMonth = curMonth === 0 ? 11 : (curMonth - 1);\r\n      let nextMonth = curMonth === 11 ? 0 : (curMonth + 1);\r\n\r\n      $(obj).addClass('selected')\r\n        .siblings().removeClass('selected');\r\n      this.selectedDate = curDate;\r\n      this.data.forEach((curVal, i) => {\r\n        if (this.formatDate(curVal.date) === curDate) {\r\n          if (new Date(curVal.date).getMonth() === nextMonth) {\r\n            $curMonthItem.next().click();\r\n          } else if (new Date(curVal.date).getMonth() === prevMonth) {\r\n            $curMonthItem.prev().click();\r\n          }\r\n          // 初始化日期dom后重新获取已选日期\r\n          let $selectedItem = this.$calDate.children('li.selected');\r\n          if (typeof callback === 'function') {\r\n            callback($selectedItem, i);\r\n          }\r\n        }\r\n      });\r\n    }\r\n  }\r\n  return PlanCalendar;\r\n});\r\n\r\n"]}