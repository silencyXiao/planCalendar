{"version":3,"sources":["planCalendar.js"],"names":["root","factory","define","amd","exports","_typeof","module","require","PlanCalendar","jQuery","window","$","_this","this","options","arguments","length","undefined","_classCallCheck","defaults","sellOutText","maxNum","maxNumText","onSelect","elem","dataIndex","initTips","monthNum","i","isTips","j","markDates","data","map","curVal","key","date","selectedDate","html","$calMonth","$cal","children","$calDate","weekCn","now","Date","_ref","getFullYear","getMonth","getDate","y","m","d","getCalMonth","on","addClass","index","mm","that","yy","selectCalDate","_createClass","value","_len","Array","_key","indexOf","t","getCalDate","days","formatDate","year","month","filter","split","parseInt","prices","dates","minPrice","price","sort","$item","_this2","curDate","op","repeatDates","uniqueData","priceHtml","a","number","forEach","planDate","push","toNumTxt","attr","getEndDate","append","dataHtml","hasClass","_this3","getDay","mNum","mHtml","getMinPrice","monthDays","nextMonthDate","startDate","endDate","$calDateItem","removeAttr","renderCalDate","eq","prevMonth","prevYear","febDays","nextYear","nextMonth","renderPlanData","calGridNum","$curMonthItem","curMonth","obj","siblings","curData","next","click","prev","$selectedItem","callback"],"mappings":"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","file":"planCalendar.min.js","sourcesContent":[";(function(root, factory) {\r\n  if (typeof define === 'function' && define.amd) {\r\n    define([], factory);\r\n  } else if (typeof exports === 'object') {\r\n    module.exports = factory(require('jquery'));\r\n  } else {\r\n    root.PlanCalendar = factory(root.jQuery);\r\n  }\r\n})(this ? this : window, function($) {\r\n  class PlanCalendar {\r\n    constructor(elem, options = {}) {\r\n      const defaults = {\r\n        monthNum: 4, // Number 默认值 4，月份显示个数\r\n        sellOutText: '售罄', // String 默认值 '售罄'，余位为0时显示文字\r\n        isTips: false, // Boolean 默认值 false，是否显示提示层 \r\n        maxNum: 20, // Number  默认值 20，大于等于指定余位显示 maxNumText 的值\r\n        maxNumText: '充足', // String  默认值 '充足'，配置大于等于指定余位显示文字\r\n        markDates: [], // Array  默认值 []， 格式化好的团期数据        \r\n        onSelect: function (dateItem, dataIndex) { // 选择团期之后的回调，dateItem：选中日期项, data[Array]: 团期数据\r\n        },\r\n        initTips: function (dataIndex) { // 初始化tips文档内容，data: 选中日期的团期数据，只选一个团期\r\n          // return String 文档内容\r\n        }\r\n\r\n      };\r\n      for (var i in defaults) {\r\n        if (typeof options[i] === 'undefined') {\r\n          options[i] = defaults[i];\r\n        } else if (typeof options[i] === 'object') {\r\n          for (var j in options[i]) {\r\n            if (typeof options[i][j] === 'undefined') {\r\n              options[i][j] = defaults[i][j];\r\n            }\r\n          }\r\n        }\r\n      }\r\n\r\n      this.options = options;\r\n      this.data = this.options.markDates.map((curVal) => {\r\n        // 格式化出团日期\r\n        for (let key in curVal) {\r\n          if (key === 'date') {\r\n            curVal[key] = this.formatDate(curVal.date);\r\n          }\r\n        }\r\n        return curVal;\r\n      });\r\n      this.options.monthNum = this.options.monthNum > 11 ? 11 : this.options.monthNum; // 选项卡个数不能超过11个\r\n      // 已选日期\r\n      this.selectedDate = undefined;\r\n      // 日历dom结构\r\n      this.$cal = $(elem);\r\n      this.$cal.html('<ul class=\"calendar-month\"> </ul> <ul class=\"calendar-week\"> <li>日</li> <li>一</li> <li>二</li> <li>三</li> <li>四</li> <li>五</li> <li>六</li> </ul> <ul class=\"calendar-date\"> </ul>');\r\n      this.$calMonth = this.$cal.children('.calendar-month');\r\n      this.$calDate = this.$cal.children('.calendar-date');\r\n      this.weekCn = ['日', '一', '二', '三', '四', '五', '六'];\r\n      // 获取当前时间\r\n      const now = new Date();\r\n      const [y, m, d] = [now.getFullYear(), now.getMonth(), now.getDate()];\r\n\r\n      this.getCalMonth(y, m, this.options.monthNum);\r\n      this.getCalDate(y, m, d);\r\n\r\n      const that = this;\r\n      this.$calMonth.on('click', 'li', function () {\r\n        $(this).addClass('active')\r\n          .siblings()\r\n          .removeClass('active');\r\n        let index = $(this).index();\r\n        let yy = m + index > 11 ? (y + 1) : y;\r\n        let mm = m + index > 11 ? (m - 12 + index) : (m + index);\r\n        that.getCalDate(yy, mm);\r\n      });\r\n      this.$calDate.on('click', 'li.enabled', function () {\r\n        that.selectCalDate(this, that.options.onSelect);\r\n      });\r\n    }\r\n    /**\r\n     * 格式化化日\r\n     * 统一返回： YY-MM-DD\r\n     */\r\n    formatDate(...date) {\r\n      if (typeof date[0] === 'string' && date[0].indexOf('-') !== -1 && date[0].length === 8) {\r\n        return date[0];\r\n      }\r\n      const t = date.length === 3 ? new Date(date[0], date[1], date[2]) : new Date(date[0]);\r\n      let m = (t.getMonth() + 1) < 10 ? ('0' + (t.getMonth() + 1)) : (t.getMonth() + 1);\r\n      let d = t.getDate() < 10 ? ('0' + t.getDate()) : t.getDate();\r\n      const dates = [t.getFullYear(), m, d];\r\n\r\n      return dates.join('-');\r\n    }\r\n    /**\r\n     * 获取指定日期指定天数之后的结束日期\r\n     * @param {* string} date 开始日期 yy-mm-dd\r\n     * @param {* number} days 天数\r\n     */\r\n    getEndDate(date, days) {\r\n      const t = new Date(date);\r\n      return this.formatDate(t.getFullYear(), t.getMonth(), t.getDate() + days);\r\n    }\r\n    /**\r\n     * 获取指定月下在团期数据中的价格最小值，\r\n     * 若该月无团则显示为“无团期”\r\n     */\r\n    getMinPrice(year, month) {\r\n      if (this.data.length === 0) {\r\n        return '<p class=\"none\">无团期</p>';\r\n      }\r\n      const prices = this.data.filter((curVal) => {\r\n        return (curVal.date.split('-')[0] == year &&\r\n          parseInt(curVal.date.split('-')[1]) == month)\r\n      });\r\n      if (prices.length === 0) {\r\n        return '<p class=\"none\">无团期</p>';\r\n      }\r\n      const minPrice = prices.map((curVal) => {\r\n        return curVal.price;\r\n      }).sort()[0];\r\n      let priceHtml = minPrice ?\r\n        `<p class=\"price\">&yen;${minPrice}起</p>` :\r\n        `<p class=\"price\">未设置</p>`\r\n      return priceHtml;\r\n    }\r\n    /**\r\n     * 渲染日期项中的团期数据\r\n     * @param {* object}  jQuery 对象，日历表格项\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份\r\n     * @param {* number} date 当前日期\r\n     */\r\n    renderPlanData($item, year, month, date) {\r\n      let curDate = this.formatDate(year, month, date); \r\n      const op = this.options;\r\n      const toNumTxt = (number) => {\r\n        if (number < op.maxNum) {\r\n          return '余：' + number;\r\n        } else if (number >= op.maxNum) {\r\n          return op.maxNumText;\r\n        } else {\r\n          return '';\r\n        }\r\n      };\r\n      const repeatDates = []; // 存储被移除的重复日期\r\n      const uniqueData = []; // 存储被去重后的数据\r\n      const dates = []; // 创建一个中间数组存储日期\r\n      // 先按照余位数量从大到小对数组进行排序，\r\n      // 使数组去重将取余位最大的数据\r\n      this.data.sort((a, b) => {\r\n        return b.number - a.number;\r\n      })\r\n      .forEach((curVal) => {\r\n        let planDate = curVal.date;\r\n        if (dates.indexOf(planDate) === -1) {\r\n          dates.push(planDate);\r\n          uniqueData.push(curVal);\r\n        } else {\r\n          repeatDates.push(curVal.date);\r\n        }\r\n      });\r\n      // 输出对应日期的团期数据\r\n      uniqueData.forEach((curVal, i) => {\r\n        let planDate = curVal.date;\r\n        if (planDate === curDate) {\r\n          let priceHtml = typeof curVal.price === 'undefined' \r\n            ? '' \r\n            : `<p class=\"price\">&yen;${curVal.price}起</p>`;\r\n          let dataHtml = `${ priceHtml }<p class=\"number\">${ toNumTxt(curVal.number) }</p>`;\r\n\r\n          $item.addClass('enabled')\r\n            .attr('data-start', planDate)\r\n            .attr('data-end', this.getEndDate(curVal.date, curVal.days))\r\n            .append(dataHtml);\r\n          if (planDate === this.selectedDate) {\r\n            $item.addClass('selected');\r\n          }\r\n          if (repeatDates.indexOf(curDate) !== -1) {\r\n            $item.append(`<i class=\"badge\">多团</i>`);\r\n          }\r\n          if (typeof curVal.number !== 'undefined' && curVal.number === 0) {\r\n            $item.append(`<i class=\"badge\">${this.options.sellOutText}</i>`);\r\n          }\r\n          if (this.options.isTips && this.options.initTips !== 'undefined' && !$item.hasClass('invalid')) {\r\n            $item.append(this.options.initTips(curVal));\r\n          }\r\n        }\r\n      });\r\n    }\r\n    /**\r\n     * 渲染网格中的日期\r\n     * @param {* object}  jQuery 对象，日历表格项\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份\r\n     * @param {* number} date 当前日期\r\n     */\r\n    renderCalDate($item, year, month, date) {\r\n      $item.attr('data-date', () => {\r\n          return this.formatDate(year, month, date);\r\n        })\r\n        .attr('data-week', () => {\r\n          return this.weekCn[new Date(year, month, date).getDay()];\r\n        })\r\n        .html(`<p class=\"date\">${ date }</p>`);\r\n    }\r\n    /**\r\n     * 获取指定年配置的所有月份\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份\r\n     * @param {* number} mNum 月份选项卡数量\r\n     */\r\n    getCalMonth(year, month, mNum) {\r\n      let mHtml = '';\r\n      for (let i = 0; i < mNum; i++) {\r\n        if (month + i > 11) { //\r\n          year++;\r\n          month = -i;\r\n        }\r\n        let m = month + 1 + i;\r\n        mHtml += `<li data-year=\"${year}\"  data-month=\"${m}\" class=\"${ i===0 ? 'active' : '' }\"><p class=\"month\">${year}年${m }月</p>${ this.getMinPrice(year, m) }</li>`;\r\n      }\r\n      this.$calMonth.html(mHtml);\r\n    }\r\n    /**\r\n     * 获取指定年月所有日期，以及部分上下月日期\r\n     * @param {* number} year 当前年份\r\n     * @param {* number} month 当前月份 \r\n     * @param {* number} date 当前日期，默认值=1 \r\n     */\r\n    getCalDate(year, month, date) {\r\n      let data = this.data;\r\n      let now = new Date();\r\n      let y = year;\r\n      let m = month;\r\n      let d = date ? date : now.getDate();\r\n      let febDays = (y % 4 == 0 && y % 100 != 0) || (y % 400 == 0) ? 29 : 28; //闰年二月份天数\r\n      const monthDays = [31, febDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n      const calGridNum = 42; //日历网格个数\r\n      let nextMonthDate = 0; //下一个月的日期\r\n      let startDate = new Date(y, m, 1).getDay(); //当月第一天\r\n      let endDate = startDate + monthDays[m]; //当月最后一天\r\n      // 初始化日期表格\r\n      this.$calDate.html('');\r\n      for (let i = 0; i < calGridNum; i++) {\r\n        this.$calDate.append('<li></li>');\r\n      }\r\n      let $calDateItem = this.$calDate.children('li');\r\n      $calDateItem.removeAttr('class');\r\n      for (let i = 0; i < calGridNum; i++) {\r\n        // 显示当月\r\n        if (i >= startDate && i < endDate) {\r\n          let curDate = i - (startDate - 1);\r\n          // 日期插入网格中\r\n          this.renderCalDate($calDateItem.eq(i), y, m, curDate);\r\n          this.renderPlanData($calDateItem.eq(i), y, m, curDate);\r\n          // 显示今天\r\n          if (y === now.getFullYear() && m === now.getMonth() && d === curDate) {\r\n            $calDateItem.eq(i).addClass('today')\r\n              .children('.date').html('今天');\r\n          }\r\n        } else if (i < startDate) { // 显示上月\r\n          let prevMonth = m === 0 ? 11 : (m - 1); // 跨年时，当m=0时, prevMonth=11;\r\n          let prevYear = m === 0 ? (y - 1) : y; // 跨年时，当m=0时, prevYear=y-1;\r\n\r\n          for (let j = monthDays[prevMonth]; j > monthDays[prevMonth] - startDate; j--) {\r\n            if (i === monthDays[prevMonth] - j) {\r\n              let curDate = monthDays[prevMonth] - ((startDate - 1) - i); // 获取当天日期\r\n              $calDateItem.eq(i).addClass('invalid');\r\n              // 日期插入网格中\r\n              this.renderCalDate($calDateItem.eq(i), prevYear, prevMonth, curDate);\r\n              // 输出对应日期的团期数据\r\n              this.renderPlanData($calDateItem.eq(i), prevYear, prevMonth, curDate);\r\n              break;\r\n            }\r\n          }\r\n        } else {\r\n          let nextMonth = m === 11 ? 0 : (m + 1);\r\n          let nextYear = m === 11 ? (y + 1) : y;\r\n          let curDate = ++nextMonthDate; // 获取当天日期\r\n\r\n          $calDateItem.eq(i).addClass('invalid');\r\n          // 日期插入网格中\r\n          this.renderCalDate($calDateItem.eq(i), nextYear, nextMonth, curDate);\r\n          // 输出对应日期的团期数据\r\n          this.renderPlanData($calDateItem.eq(i), nextYear, nextMonth, curDate);\r\n        }\r\n      }\r\n    }\r\n    /**\r\n     * \r\n     * @param {* object} obj dom 对象\r\n     * @param {* function } callback 回调，参数：dateItem 已选日期项；dataIndex： 团期数据索引\r\n     */\r\n    selectCalDate(obj, callback) {\r\n\r\n      let curDate = $(obj).attr('data-date');\r\n      let $curMonthItem = this.$calMonth.children('li.active');\r\n      let curMonth = ($curMonthItem.attr('data-month') - 1);\r\n      let prevMonth = curMonth === 0 ? 11 : (curMonth - 1);\r\n      let nextMonth = curMonth === 11 ? 0 : (curMonth + 1);\r\n\r\n      $(obj).addClass('selected')\r\n        .siblings().removeClass('selected');\r\n      this.selectedDate = curDate;\r\n\r\n      const curData = this.data.filter((curVal, i) => {\r\n        if (curVal.date === curDate) {\r\n          // 判断所选日期是否为当月、上月或下月\r\n          if (new Date(curVal.date).getMonth() === nextMonth) {\r\n            $curMonthItem.next().click();\r\n          } else if (new Date(curVal.date).getMonth() === prevMonth) {\r\n            $curMonthItem.prev().click();\r\n          }\r\n        }  \r\n        return curVal.date === curDate;\r\n      });\r\n      // 初始化日期dom后重新获取已选日期\r\n      let $selectedItem = this.$calDate.children('li.selected');\r\n\r\n      if (typeof callback === 'function') {\r\n        callback($selectedItem, curData);\r\n      }\r\n    }\r\n  }\r\n  return PlanCalendar;\r\n});\r\n\r\n"]}