{"version":3,"sources":["planCalendar.es6.js"],"names":["root","factory","define","amd","exports","_typeof","module","PlanCalendar","getType","num","obj2Str","Object","prototype","toString","format","call","d","date","Date","r","rule","obj","yyyy","getFullYear","mm","appendZero","getMonth","dd","getDate","seps","match","obj1","obj2","hasClass","el","addClass","cls","className","includes","node","parentNode","removeClass","re","RegExp","replace","options","_classCallCheck","this","$el","mapAssignObj","document","querySelector","$options","i","getTargetNode","parent","monthNum","showExpiredData","minPriceText","maxNum","maxNumText","defineNumText","markDates","disableDates","data","onMouseLeave","optimizeData","startByData","onMonthChange","$startDate","$data","length","$seletedDate","_createClass","key","value","time","initCalendar","getTime","sortDates","reduce","prevVal","curVal","push","sort","min","max","startTime","_this2","year","split","month","monthActiveIndex","createElem","$next","getCalMonthHtml","getCalWeek","$month","getCalDateHtml","getMonthData","on","targetNode","childNodes","forEach","getAttribute","$date","getPlanDateData","nextSibling","click","related","curDate","onMouseEnter","trim","$prev","addEventListener","previousSibling","innerHTML","eventType","_this","elem","event","relatedTarget","childSelector","callback","createElement","selector","nodeName","toLowerCase","substring","id","html","target","srcElement","uniqueData","tag","getUniqueData","dates","sellOutText","price","toNumText","number","type","indexOf","prevArr","monthDays","startDateIndex","arguments","endDateIndex","getCurDate","filter","calDateData","prevYear","prevMonth","nextYear","nextMonth","status","getPlanDateHtml","dateString","week","disabledClass","selectClass","invalidClass","todayClass","dateText","isToday","isDisabled","index","minPrice","yy","minPriceTxt","weekCn","getMinPrice","filterData","dateTime","end","console","map","start","warn","t"],"mappings":"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","file":"planCalendar.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    exports = module.exports = factory();\n  } else {\n    root.PlanCalendar = factory();\n  }\n})(this ? this : window, function() {\n  class PlanCalendar {\n    constructor(el, options) {\n      // 默认值\n      const defaults = {\n        monthNum: 4, // Number 默认值 4，月份显示个数\n        startByData: false, // Boolean 根据传入数据的最小日期指定第一个月的显示\n        showExpiredData: false, // Boolean 默认值 false，是否渲染今天以前的数据; 当showExpiredData值为true时，startByData 设置true将失效\n        minPriceText: '无团期', // String, 默认值 无团期， 当月最小价格为0 时显示文字\n        sellOutText: '售罄', // String 默认值 '售罄'，余位为0时显示文字\n        maxNum: 20, // Number  默认值 20，大于等于指定余位显示 maxNumText 的值\n        maxNumText: '充足', // String  默认值 '充足'，配置大于等于指定余位显示文字\n        defineNumText: '', // String 默认值： '', 自定义数量显示，若设置，权重最高，maxNumText 会失效\n        markDates: [], // Array  默认值 []， 格式化好的团期数据\n        disableDates: [], // // 禁选团期，只禁用含团的日期，Array 指定日期 | Object 时间范围，start/end，\n        onSelect: function(data) {\n          // 选择团期之后的回调, data[Array]: 团期数据\n        },\n        onMouseEnter: function(data) {\n          // 鼠标移入含团日期回调， data[Array]: 团期数据，ps：必须为当月，上月或下月将不触发\n        },\n        onMouseLeave: function() {\n          // 鼠标离开当月日期项之后的回调\n        },\n        onMonthChange: function(data) {\n          // 切换月之后的回调，data[Array]： 当月所有的团期数据\n        }\n      };\n\n      this.$el = isNodeElement(el) ? el : document.querySelector(el);\n      this.$options = mapAssignObj(defaults, options); // 初始化参数\n      this.$data = this.optimizeData();\n      // 当showExpiredData值为true时，startByData 设置true将失效\n      this.$options.startByData =\n        this.$options.startByData && !this.$options.showExpiredData;\n      this.$startDate =\n        this.$data.length > 0 ? this.$data[0].date : format(new Date()); // 第一个含数据的日期\n      this.$seletedDate = ''; // 已选日期\n      // 标准化数据中的日期 yyyy-mm-dd\n      this.initCalendar();\n    }\n    // 优化传入数据\n    optimizeData() {\n      const time = new Date();\n      const startTime = new Date(\n        time.getFullYear(),\n        time.getMonth(),\n        time.getDate()\n      ).getTime();\n      const markDates = this.$options.markDates.reduce((prevVal, curVal) => {\n        curVal.date = format(new Date(curVal.date));\n        prevVal.push(curVal);\n        return prevVal;\n      }, []);\n      const sortDates = markDates.sort((min, max) => {\n        return new Date(min.date).getTime() - new Date(max.date).getTime();\n      });\n      return this.$options.showExpiredData\n        ? sortDates\n        : sortDates.filter(curVal => {\n            // 过滤今天以前的数据\n            return startTime <= new Date(curVal.date).getTime();\n          });\n    }\n    initCalendar() {\n      const options = this.$options;\n\n      let year = options.startByData\n        ? +this.$startDate.split('/')[0]\n        : new Date().getFullYear();\n      let month = options.startByData\n        ? +this.$startDate.split('/')[1] - 1\n        : new Date().getMonth();\n      let monthActiveIndex = 0;\n\n      const $prev = this.createElem('span', 'calendar-btn-prev', '&lt;');\n      const $next = this.createElem('span', 'calendar-btn-next', '&gt;');\n      const $month = this.createElem(\n        'ul',\n        'calendar-month',\n        this.getCalMonthHtml(year, month, monthActiveIndex)\n      );\n      this.createElem('ul', 'calendar-week', this.getCalWeek());\n      const $date = this.createElem(\n        'ul',\n        'calendar-date',\n        this.getCalDateHtml(year, month)\n      );\n\n      // 初始化获取当月数据\n      options.onMonthChange(this.getMonthData(year, month));\n\n      // 切换月\n      this.on('click', $month, 'li', (parent, targetNode) => {\n        parent.childNodes.forEach(curVal => removeClass(curVal, 'active'));\n        addClass(targetNode, 'active');\n        for (let i = 0; i < parent.childNodes.length; i++) {\n          if (parent.childNodes[i] === targetNode) {\n            monthActiveIndex = i;\n            break;\n          }\n        }\n        year = +targetNode.getAttribute('data-year');\n        month = +targetNode.getAttribute('data-month') - 1;\n        $date.innerHTML = this.getCalDateHtml(year, month);\n        options.onMonthChange(this.getMonthData(year, month));\n      });\n\n      // 选择含团日期\n      this.on('click', $date, '.enabled', (parent, targetNode) => {\n        // 移除所有元素样式类.selected\n        parent.childNodes.forEach(curVal => removeClass(curVal, 'selected'));\n        addClass(targetNode, 'selected');\n        this.$seletedDate = targetNode.getAttribute('data-date');\n        options.onSelect(this.getPlanDateData(this.$seletedDate));\n        if (targetNode.className.includes('prev')) {\n          $month.childNodes[monthActiveIndex].previousSibling.click();\n        }\n        if (targetNode.className.includes('next')) {\n          $month.childNodes[monthActiveIndex].nextSibling.click();\n        }\n      });\n      // 鼠标移入含团日期\n      this.on('mouseover', $date, '.enabled', (parent, targetNode, related) => {\n        const curDate = targetNode.getAttribute('data-date');\n        if (\n          related !== targetNode &&\n          !targetNode.contains(related) &&\n          (targetNode.className.trim() === 'enabled' ||\n            targetNode.className.includes('selected'))\n        ) {\n          options.onMouseEnter(this.getPlanDateData(curDate));\n        }\n      });\n      // 鼠标移出含团日期\n      this.on('mouseout', $date, '.enabled', (parent, targetNode, related) => {\n        if (\n          related !== targetNode &&\n          !targetNode.contains(related) &&\n          (targetNode.className.trim() === 'enabled' ||\n            targetNode.className.includes('selected'))\n        ) {\n          options.onMouseLeave();\n        }\n      });\n      // 切换至上月\n      $prev.addEventListener('click', () => {\n        year = month === 0 ? --year : year;\n        month = month === 0 ? 11 : --month;\n        if (monthActiveIndex === 0) {\n          monthActiveIndex = 0;\n          $month.innerHTML = this.getCalMonthHtml(\n            year,\n            month,\n            monthActiveIndex\n          );\n          $date.innerHTML = this.getCalDateHtml(year, month);\n        } else {\n          $month.childNodes[monthActiveIndex].previousSibling.click();\n        }\n        options.onMonthChange(this.getMonthData(year, month));\n      });\n      // 切换至下月\n      $next.addEventListener('click', () => {\n        year = month === 11 ? ++year : year;\n        month = month === 11 ? 0 : ++month;\n        if (monthActiveIndex === options.monthNum - 1) {\n          monthActiveIndex = 0;\n          $month.innerHTML = this.getCalMonthHtml(\n            year,\n            month,\n            monthActiveIndex\n          );\n          $date.innerHTML = this.getCalDateHtml(year, month);\n        } else {\n          $month.childNodes[monthActiveIndex].nextSibling.click();\n        }\n        options.onMonthChange(this.getMonthData(year, month));\n      });\n    }\n    // 事件委托\n    on(eventType, elem, childSelector, callback) {\n      const _this = this;\n      elem.addEventListener(eventType, function(event) {\n        const target = event.target || event.srcElement;\n        const targetNode = getTargetNode(target, this, childSelector);\n        const related = event.relatedTarget;\n\n        if (targetNode) {\n          callback && callback(this, targetNode, related);\n        }\n      });\n    }\n    createElem(tag, cls, html) {\n      const elem = document.createElement(tag);\n      elem.className = cls;\n      elem.innerHTML = html;\n      this.$el.append(elem);\n      return elem;\n    }\n    getPlanDate(year, month, date) {\n      const options = this.$options;\n      const uniqueData = this.getUniqueData();\n\n      // 返回团期对应\n      for (let i = 0; i < uniqueData.length; i++) {\n        if (format(new Date(year, month, date)) === uniqueData[i].date) {\n          let badge =\n            this.getPlanDateData(year, month, date).length > 1\n              ? '<i class=\"badge\">多团</i>'\n              : uniqueData[i].number === 0\n                ? `<i class=\"badge\">${options.sellOutText}</i>`\n                : '';\n          return `${badge}\n            <p class=\"price\">&yen;${uniqueData[i].price}起</p>\n            <p class=\"number\">${this.toNumText(uniqueData[i].number)}</p>`;\n        }\n      }\n    }\n    // 获取去重后的数据对象，默认返回含对象的数组，当type = date 时返回['2018/08/25,2018/08/21']\n    getUniqueData(type) {\n      const dates = []; // 过滤团期使用的中间数组\n      // 获取日期去重数据\n      const uniqueData = this.$data\n        .sort((min, max) => {\n          return min.price - max.price;\n        })\n        .reduce((prevArr, curVal) => {\n          if (dates.indexOf(curVal.date) === -1) {\n            prevArr.push(curVal);\n            dates.push(curVal.date);\n          }\n          return prevArr;\n        }, []);\n\n      return type === 'date' ? dates : uniqueData;\n    }\n    // 获取指定日期团期数据，返回值数组\n    getPlanDateData(...dates) {\n      const curDate =\n        dates.length === 1\n          ? format(new Date(dates[0]))\n          : format(new Date(dates[0], dates[1], dates[2]));\n\n      return this.$data\n        .filter(curVal => {\n          return curVal.date === curDate;\n        })\n        .sort((min, max) => {\n          return min.price - max.price;\n        });\n    }\n    getCalDateData(year, month) {\n      const febDays =\n        (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 ? 29 : 28; // 平年和闰年二月份天数\n      const monthDays = [31, febDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      const startDateIndex = new Date(year, month, 1).getDay();\n      const endDateIndex = startDateIndex + (monthDays[month] - 1);\n      const getCurDate = ((num = 0) => () => ++num)(); // 累加计数器\n      const calDateData = [];\n      for (let i = 0; i < 42; i++) {\n        if (i < startDateIndex) {\n          // 获取上月数据\n          // 处理跨年, 月变11，年减1\n          let prevMonth = month === 0 ? 11 : month - 1;\n          let prevYear = month === 0 ? year - 1 : year;\n          let d = monthDays[prevMonth] - (startDateIndex - 1 - i);\n          let curDate = format(new Date(prevYear, prevMonth, d));\n          calDateData.push({ date: curDate, status: 'prev' });\n        } else if (i >= startDateIndex && i <= endDateIndex) {\n          // 获取当月数据\n          let d = i - startDateIndex + 1;\n          let curDate = format(new Date(year, month, d));\n          calDateData.push({ date: curDate, status: 'current' });\n        } else {\n          // 获取下月数据\n          // 处理跨年，月变0，年加1\n          let nextMonth = month === 11 ? 0 : month + 1;\n          let nextYear = month === 11 ? year + 1 : year;\n          let curDate = format(new Date(nextYear, nextMonth, getCurDate()));\n          calDateData.push({ date: curDate, status: 'next' });\n        }\n      }\n\n      return calDateData;\n    }\n    getCalDateHtml(year, month) {\n      let t = new Date();\n      let html = '';\n\n      const options = this.$options;\n      const calDateData = this.getCalDateData(year, month);\n      const uniqueData = this.getUniqueData('date');\n\n      for (let i = 0; i < calDateData.length; i++) {\n        if (calDateData[i].status === 'prev') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'prev');\n        } else if (calDateData[i].status === 'current') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'current');\n        } else if (calDateData[i].status === 'next') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'next');\n        }\n      }\n      return html;\n    }\n    getPlanDateHtml(dateString, type) {\n      const uniqueData = this.getUniqueData('date');\n      const year = +dateString.split('/')[0];\n      const month = +dateString.split('/')[1] - 1;\n      const date = +dateString.split('/')[2];\n      const week = new Date(dateString).getDay();\n      const dateText = this.isToday(year, month, date);\n      const disabledClass = this.isDisabled(dateString)\n        ? 'disabled'\n        : 'enabled';\n      const selectClass = this.$seletedDate === dateString ? 'selected' : '';\n      const invalidClass = type !== 'current' ? `invalid ${type}` : '';\n      const todayClass = dateText === '今天' ? 'today' : '';\n\n      if (uniqueData.indexOf(dateString) !== -1) {\n        return `<li class=\"${disabledClass} ${selectClass} ${invalidClass} ${todayClass}\" data-date=\"${dateString}\" data-week=\"${week}\">\n            <p class=\"date\">${dateText}</p>\n            ${this.getPlanDate(year, month, date)}\n          </li>`;\n      }\n      return `<li class=\"${invalidClass} ${todayClass}\" data-date=\"${dateString}\" data-week=\"${week}\"><p class=\"date\">${dateText}</p></li>`;\n    }\n    getCalMonthHtml(year, month, index) {\n      let html = '';\n      let yy = year;\n      let mm = month;\n      for (let i = 0; i < this.$options.monthNum; i++) {\n        mm = month + i;\n        if (month + i > 11) {\n          yy = year + 1;\n          mm = month + i - 12;\n        }\n\n        let minPrice = this.getMinPrice(yy, mm);\n        let minPriceTxt =\n          minPrice === this.$options.minPriceText\n            ? minPrice\n            : `&yen;${minPrice}起`;\n\n        html += `<li data-year=\"${yy}\" data-month=\"${mm + 1}\" class=\"item \n          ${i === index ? 'active' : ''}\">\n          <p class=\"month\">${yy}年${mm + 1}月</p>\n          <p class=\"${\n            minPrice === this.$options.minPriceText ? 'none' : 'price'\n          }\">${minPriceTxt}</p>\n        </li>`;\n      }\n      return html;\n    }\n    getCalWeek() {\n      const weekCn = ['日', '一', '二', '三', '四', '五', '六'];\n      let html = '';\n\n      for (let i = 0; i < weekCn.length; i++) {\n        html += `<li>${weekCn[i]}</li>`;\n      }\n      return html;\n    }\n    getMonthData(year, month) {\n      // 获取指定月最低价格\n      if (this.$data.length === 0) return this.$data;\n      // 根据年月日过滤数据\n      const filterData = this.$data.filter(curVal => {\n        return (\n          +curVal.date.split('/')[0] === year &&\n          +curVal.date.split('/')[1] === month + 1\n        );\n      });\n      return filterData.sort((min, max) => {\n        return new Date(min.date).getTime() - new Date(max.date).getTime();\n      });\n    }\n    toNumText(num) {\n      const options = this.$options;\n      if (options.defineNumText) {\n        return options.defineNumText;\n      } else if (num >= options.maxNum) {\n        return options.maxNumText;\n      } else {\n        return '余：' + num;\n      }\n      // return num < options.maxNum ? '余：' + num : options.maxNumText;\n    }\n    isDisabled(date) {\n      const disableDates = this.$options.disableDates;\n\n      if (getType(disableDates) === 'array') {\n        if (disableDates.length === 0) return false;\n        const dates = disableDates.map(curVal => format(curVal));\n        return dates.indexOf(date) === -1 ? false : true;\n      } else {\n        const dateTime = new Date(date).getTime();\n\n        const start = disableDates.start\n          ? new Date(format(disableDates.start)).getTime()\n          : new Date().getTime();\n        const end = disableDates.end\n          ? new Date(format(disableDates.end)).getTime()\n          : new Date().getTime();\n        if (end - start <= 0) {\n          console.warn('disableDates的start日期不能大于end日期');\n          return false;\n        } else {\n          return dateTime >= start && dateTime <= end ? true : false;\n        }\n      }\n    }\n    // 获取数组中的最低价\n    getMinPrice(year, month, date) {\n      // 获取指定日期最低价格\n      if (date) return this.getPlanDateData(year, month, date)[0];\n      // 获取指定月最低价格\n      if (this.$data.length === 0) return this.$options.minPriceText;\n      // 根据年月日过滤数据\n      const filterData = this.$data.filter(curVal => {\n        return (\n          +curVal.date.split('/')[0] === year &&\n          +curVal.date.split('/')[1] === month + 1\n        );\n      });\n      // 返回已过滤数组中的最小价格\n      return filterData.length !== 0\n        ? filterData\n            .map(curVal => {\n              return curVal.price;\n            })\n            .sort((min, max) => {\n              return min - max;\n            })[0]\n        : this.$options.minPriceText;\n    }\n    getStart(type) {\n      const time = new Date();\n      const startTime = new Date(\n        time.getFullYear(),\n        time.getMonth(),\n        time.getDate()\n      ).getTime();\n      if (this.$options.startByData) {\n      }\n    }\n    isToday(year, month, date) {\n      const t = new Date();\n      return new Date(year, month, date).getTime() ===\n        new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime()\n        ? '今天'\n        : date;\n    }\n  }\n  // 数字小于10追加 0\n  function appendZero(num) {\n    return num >= 10 ? num : '0' + num;\n  }\n  // 格式化日期, date 日期对象|时间戳|日期字符串，rule 结果日期格式如yyyy-mm-dd\n  function format(date, rule) {\n    const d = getType(date) === 'date' ? date : new Date(date);\n    const r = rule ? rule : 'yyyy/mm/dd';\n    const yyyy = d.getFullYear();\n    const mm = appendZero(d.getMonth() + 1);\n    const dd = appendZero(d.getDate());\n    const seps = r.match(/[-/\\s年月日]/g);\n\n    return `${yyyy}${seps[0]}${mm}${seps[1]}${dd}${seps[2] ? seps[2] : ''}`;\n  }\n  // 判断是否为元素节点\n  function isNodeElement(node) {\n    return node.nodeType === 1;\n  }\n  // 获取数据类型\n  function getType(obj) {\n    const obj2Str = Object.prototype.toString;\n    if (obj2Str.call(obj) === '[object Array]') {\n      return 'array';\n    } else if (obj2Str.call(obj) === '[object Object]') {\n      return 'object';\n    } else if (obj2Str.call(obj) === '[object Date]') {\n      return 'date';\n    }\n  }\n  // 遍历赋值对象, obj1 默认对象，obj2 赋值对象\n  function mapAssignObj(obj1, obj2) {\n    for (let i in obj1) {\n      if (typeof obj2[i] === 'undefined') {\n        obj2[i] = obj1[i];\n      } else if (getType(obj2[i]) === 'object') {\n        mapAssignObj(obj1[i], obj2[i]);\n      }\n    }\n    return obj2;\n  }\n  function hasClass(el, cls) {\n    return el.className.includes(cls);\n  }\n  function addClass(el, cls) {\n    if (!hasClass(el, cls)) {\n      el.className += ' ' + cls;\n    }\n  }\n  function removeClass(el, cls) {\n    if (hasClass(el, cls)) {\n      const re = new RegExp(`(\\\\s|^)${cls}`);\n      el.className = el.className.replace(re, '');\n    }\n  }\n  function getTargetNode(node, parent, selector) {\n    if (node.parentNode.nodeName === 'BODY') return null;\n    if (node.parentNode === parent) {\n      if (\n        node.nodeName.toLowerCase() === selector ||\n        node.className.includes(selector.substring(1)) ||\n        node.id.includes(selector.substring(1))\n      ) {\n        return node;\n      }\n      return null;\n    }\n    return node.parentNode !== parent\n      ? getTargetNode(node.parentNode, parent, selector)\n      : null;\n  }\n\n  return PlanCalendar;\n});\n"]}