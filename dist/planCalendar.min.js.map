{"version":3,"sources":["planCalendar.es6.js"],"names":["root","factory","define","amd","exports","_typeof","module","PlanCalendar","getType","num","obj2Str","Object","prototype","toString","format","call","d","date","Date","r","rule","obj","yyyy","getFullYear","mm","appendZero","getMonth","dd","getDate","seps","match","obj1","obj2","hasClass","el","addClass","cls","className","includes","removeClass","re","RegExp","replace","options","_classCallCheck","this","$el","mapAssignObj","document","querySelector","$options","i","getTargetNode","node","parent","monthNum","sellOutText","maxNum","defineNumText","markDates","disableDates","onSelect","data","startByData","maxNumText","onMouseEnter","optimizeData","$startDate","$data","$seletedDate","initCalendar","_createClass","key","value","_this2","isNodeElement","time","getTime","sortDates","reduce","prevVal","curVal","push","sort","min","max","filter","startTime","t","setMonth","end","setDate","start","_this3","filterDates","year","split","month","monthActiveIndex","$month","createElem","getCalWeek","$date","forEach","on","childNodes","targetNode","length","getAttribute","innerHTML","getCalDateHtml","getPlanDateData","previousSibling","click","nextSibling","curDate","related","contains","trim","onMouseLeave","$prev","addEventListener","getCalMonthHtml","$next","eventType","elem","_this","event","target","childSelector","callback","selector","parentNode","nodeName","toLowerCase","substring","id","srcElement","relatedTarget","tag","badge","append","uniqueData","getUniqueData","dates","price","toNumText","number","type","indexOf","prevArr","calDateData","arguments","undefined","html","getPlanDateHtml","dateString","week","dateText","status","disabledClass","isDisabled","selectClass","invalidClass","todayClass","febDays","monthDays","getDay","startDateIndex","endDateIndex","getPlanDate","prevMonth","nextYear","index","getCurDate","yy","weekCn","minPrice","dateTime","console","map","warn","filterData"],"mappings":"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","file":"planCalendar.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define(factory);\n  } else if (typeof exports === 'object') {\n    exports = module.exports = factory();\n  } else {\n    root.PlanCalendar = factory();\n  }\n})(this ? this : window, function() {\n  class PlanCalendar {\n    constructor(el, options) {\n      // 默认值\n      const defaults = {\n        monthNum: 4, // Number 默认值 4，月份显示个数\n        startByData: false, // Boolean 根据传入数据的最小日期指定第一个月的显示\n        sellOutText: '售罄', // String 默认值 '售罄'，余位为0时显示文字\n        maxNum: 20, // Number  默认值 20，大于等于指定余位显示 maxNumText 的值\n        maxNumText: '充足', // String  默认值 '充足'，配置大于等于指定余位显示文字\n        defineNumText: '', // String 默认空， 自定义余位显示内容\n        markDates: [], // Array  默认值 []， 格式化好的团期数据\n        disableDates: [], // // 禁选团期，只禁用含团的日期，Array 指定日期 | Object 时间范围，start/end，\n        onSelect: function(data) {\n          // 选择团期之后的回调, data[Array]: 团期数据\n        },\n        onMouseEnter: function(data) {\n          // 鼠标移入含团日期回调， data[Array]: 团期数据，ps：必须为当月，上月或下月将不触发\n        },\n        onMouseLeave: function() {\n          // 鼠标离开当月日期项之后的回调\n        }\n      };\n\n      this.$el = isNodeElement(el) ? el : document.querySelector(el);\n      this.$options = mapAssignObj(defaults, options); // 初始化参数\n      this.$data = this.optimizeData();\n      this.$startDate = this.$data[0].date; // 第一个含数据的日期\n      this.$seletedDate = ''; // 已选日期\n      // 标准化数据中的日期 yyyy-mm-dd\n      this.initCalendar();\n    }\n    // 优化传入数据\n    optimizeData() {\n      const time = new Date();\n      const startTime = new Date(\n        time.getFullYear(),\n        time.getMonth(),\n        time.getDate()\n      ).getTime();\n      const markDates = this.$options.markDates.reduce((prevVal, curVal) => {\n        curVal.date = format(new Date(curVal.date));\n        prevVal.push(curVal);\n        return prevVal;\n      }, []);\n      const sortDates = markDates\n        .sort((min, max) => {\n          return new Date(min.date).getTime() - new Date(max.date).getTime();\n        })\n        .filter(curVal => {\n          return startTime <= new Date(curVal.date).getTime();\n        });\n      // 过滤今天以前的数据\n      const filterDates = sortDates.filter(curVal => {\n        let t = this.$options.startByData\n          ? startTime <= new Date(sortDates[0].date).getTime()\n            ? new Date(sortDates[0].date)\n            : new Date(startTime)\n          : new Date(startTime);\n        let start = t.getTime();\n        t.setMonth(t.getMonth() + this.$options.monthNum);\n        let end = t.setDate(1);\n\n        return (\n          new Date(curVal.date).getTime() >= start &&\n          new Date(curVal.date).getTime() < end\n        );\n      });\n\n      return filterDates;\n    }\n    initCalendar() {\n      const options = this.$options;\n\n      let year = options.startByData\n        ? +this.$startDate.split('/')[0]\n        : new Date().getFullYear();\n      let month = options.startByData\n        ? +this.$startDate.split('/')[1] - 1\n        : new Date().getMonth();\n      let monthActiveIndex = 0;\n\n      const $prev = this.createElem('span', 'calendar-btn-prev', '&lt;');\n      const $next = this.createElem('span', 'calendar-btn-next', '&gt;');\n      const $month = this.createElem(\n        'ul',\n        'calendar-month',\n        this.getCalMonthHtml(year, month, monthActiveIndex)\n      );\n      this.createElem('ul', 'calendar-week', this.getCalWeek());\n      const $date = this.createElem(\n        'ul',\n        'calendar-date',\n        this.getCalDateHtml(year, month)\n      );\n\n      // 切换月\n      this.on('click', $month, 'li', (parent, targetNode) => {\n        parent.childNodes.forEach(curVal => removeClass(curVal, 'active'));\n        addClass(targetNode, 'active');\n        for (let i = 0; i < parent.childNodes.length; i++) {\n          if (parent.childNodes[i] === targetNode) {\n            monthActiveIndex = i;\n            break;\n          }\n        }\n        year = +targetNode.getAttribute('data-year');\n        month = +targetNode.getAttribute('data-month') - 1;\n        $date.innerHTML = this.getCalDateHtml(year, month);\n      });\n\n      // 选择含团日期\n      this.on('click', $date, '.enabled', (parent, targetNode) => {\n        // 移除所有元素样式类.selected\n        parent.childNodes.forEach(curVal => removeClass(curVal, 'selected'));\n        addClass(targetNode, 'selected');\n        this.$seletedDate = targetNode.getAttribute('data-date');\n        options.onSelect(this.getPlanDateData(this.$seletedDate));\n        if (targetNode.className.includes('prev')) {\n          $month.childNodes[monthActiveIndex].previousSibling.click();\n        }\n        if (targetNode.className.includes('next')) {\n          $month.childNodes[monthActiveIndex].nextSibling.click();\n        }\n      });\n      // 鼠标移入含团日期\n      this.on('mouseover', $date, '.enabled', (parent, targetNode, related) => {\n        const curDate = targetNode.getAttribute('data-date');\n        if (\n          related !== targetNode &&\n          !targetNode.contains(related) &&\n          (targetNode.className.trim() === 'enabled' ||\n            targetNode.className.includes('selected'))\n        ) {\n          options.onMouseEnter(this.getPlanDateData(curDate));\n        }\n      });\n      // 鼠标移出含团日期\n      this.on('mouseout', $date, '.enabled', (parent, targetNode, related) => {\n        if (\n          related !== targetNode &&\n          !targetNode.contains(related) &&\n          (targetNode.className.trim() === 'enabled' ||\n            targetNode.className.includes('selected'))\n        ) {\n          options.onMouseLeave();\n        }\n      });\n      // 切换至上月\n      $prev.addEventListener('click', () => {\n        year = month === 0 ? --year : year;\n        month = month === 0 ? 11 : --month;\n        if (monthActiveIndex === 0) {\n          monthActiveIndex = 0;\n          $month.innerHTML = this.getCalMonthHtml(\n            year,\n            month,\n            monthActiveIndex\n          );\n          $date.innerHTML = this.getCalDateHtml(year, month);\n        } else {\n          $month.childNodes[monthActiveIndex].previousSibling.click();\n        }\n      });\n      // 切换至下月\n      $next.addEventListener('click', () => {\n        year = month === 11 ? ++year : year;\n        month = month === 11 ? 0 : ++month;\n        if (monthActiveIndex === options.monthNum - 1) {\n          monthActiveIndex = 0;\n          $month.innerHTML = this.getCalMonthHtml(\n            year,\n            month,\n            monthActiveIndex\n          );\n          $date.innerHTML = this.getCalDateHtml(year, month);\n        } else {\n          $month.childNodes[monthActiveIndex].nextSibling.click();\n        }\n      });\n    }\n    // 事件委托\n    on(eventType, elem, childSelector, callback) {\n      const _this = this;\n      elem.addEventListener(eventType, function(event) {\n        const target = event.target || event.srcElement;\n        const targetNode = getTargetNode(target, this, childSelector);\n        const related = event.relatedTarget;\n\n        if (targetNode) {\n          callback && callback(this, targetNode, related);\n        }\n      });\n    }\n    createElem(tag, cls, html) {\n      const elem = document.createElement(tag);\n      elem.className = cls;\n      elem.innerHTML = html;\n      this.$el.append(elem);\n      return elem;\n    }\n    getPlanDate(year, month, date) {\n      const options = this.$options;\n      const uniqueData = this.getUniqueData();\n\n      // 返回团期对应\n      for (let i = 0; i < uniqueData.length; i++) {\n        if (format(new Date(year, month, date)) === uniqueData[i].date) {\n          let badge =\n            this.getPlanDateData(year, month, date).length > 1\n              ? '<i class=\"badge\">多团</i>'\n              : uniqueData[i].number === 0\n                ? `<i class=\"badge\">${options.sellOutText}</i>`\n                : '';\n          return `${badge}\n            <p class=\"price\">&yen;${uniqueData[i].price}起</p>\n            <p class=\"number\">${this.toNumText(uniqueData[i].number)}</p>`;\n        }\n      }\n    }\n    // 获取去重后的数据对象，默认返回含对象的数组，当type = date 时返回['2018/08/25,2018/08/21']\n    getUniqueData(type) {\n      const dates = []; // 过滤团期使用的中间数组\n      // 获取日期去重数据\n      const uniqueData = this.$data\n        .sort((min, max) => {\n          return min.price - max.price;\n        })\n        .reduce((prevArr, curVal) => {\n          if (dates.indexOf(curVal.date) === -1) {\n            prevArr.push(curVal);\n            dates.push(curVal.date);\n          }\n          return prevArr;\n        }, []);\n\n      return type === 'date' ? dates : uniqueData;\n    }\n    // 获取指定日期团期数据，返回值数组\n    getPlanDateData(...dates) {\n      const curDate =\n        dates.length === 1\n          ? format(new Date(dates[0]))\n          : format(new Date(dates[0], dates[1], dates[2]));\n\n      return this.$data\n        .filter(curVal => {\n          return curVal.date === curDate;\n        })\n        .sort((min, max) => {\n          return min.price - max.price;\n        });\n    }\n    getCalDateHtml(year, month) {\n      let t = new Date();\n      let html = '';\n\n      const options = this.$options;\n      const calDateData = this.getCalDateData(year, month);\n      const uniqueData = this.getUniqueData('date');\n\n      for (let i = 0; i < calDateData.length; i++) {\n        if (calDateData[i].status === 'prev') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'prev');\n        } else if (calDateData[i].status === 'current') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'current');\n        } else if (calDateData[i].status === 'next') {\n          html += this.getPlanDateHtml(calDateData[i].date, 'next');\n        }\n      }\n      return html;\n    }\n    getPlanDateHtml(dateString, type) {\n      const uniqueData = this.getUniqueData('date');\n      const year = +dateString.split('/')[0];\n      const month = +dateString.split('/')[1] - 1;\n      const date = +dateString.split('/')[2];\n      const week = new Date(dateString).getDay();\n      const dateText = this.isToday(year, month, date);\n      const disabledClass = this.isDisabled(dateString)\n        ? 'disabled'\n        : 'enabled';\n      const selectClass = this.$seletedDate === dateString ? 'selected' : '';\n      const invalidClass = type !== 'current' ? `invalid ${type}` : '';\n      const todayClass = dateText === '今天' ? 'today' : '';\n\n      if (uniqueData.indexOf(dateString) !== -1) {\n        return `<li class=\"${disabledClass} ${selectClass} ${invalidClass} ${todayClass}\" data-date=\"${dateString}\" data-week=\"${week}\">\n            <p class=\"date\">${dateText}</p>\n            ${this.getPlanDate(year, month, date)}\n          </li>`;\n      }\n      return `<li class=\"${invalidClass} ${todayClass}\" data-date=\"${dateString}\" data-week=\"${week}\"><p class=\"date\">${dateText}</p></li>`;\n    }\n    getCalDateData(year, month) {\n      const febDays =\n        (year % 4 === 0 && year % 100 !== 0) || year % 400 === 0 ? 29 : 28; // 平年和闰年二月份天数\n      const monthDays = [31, febDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      const startDateIndex = new Date(year, month, 1).getDay();\n      const endDateIndex = startDateIndex + (monthDays[month] - 1);\n      const getCurDate = ((num = 0) => () => ++num)(); // 累加计数器\n      const calDateData = [];\n      for (let i = 0; i < 42; i++) {\n        if (i < startDateIndex) {\n          // 获取上月数据\n          // 处理跨年, 月变11，年减1\n          let prevMonth = month === 0 ? 11 : month - 1;\n          let prevYear = month === 0 ? year - 1 : year;\n          let d = monthDays[prevMonth] - (startDateIndex - 1 - i);\n          let curDate = format(new Date(prevYear, prevMonth, d));\n          calDateData.push({ date: curDate, status: 'prev' });\n        } else if (i >= startDateIndex && i <= endDateIndex) {\n          // 获取当月数据\n          let d = i - startDateIndex + 1;\n          let curDate = format(new Date(year, month, d));\n          calDateData.push({ date: curDate, status: 'current' });\n        } else {\n          // 获取下月数据\n          // 处理跨年，月变0，年加1\n          let nextMonth = month === 11 ? 0 : month + 1;\n          let nextYear = month === 11 ? year + 1 : year;\n          let curDate = format(new Date(nextYear, nextMonth, getCurDate()));\n          calDateData.push({ date: curDate, status: 'next' });\n        }\n      }\n\n      return calDateData;\n    }\n    getCalMonthHtml(year, month, index) {\n      let html = '';\n      let yy = year;\n      let mm = month;\n      for (let i = 0; i < this.$options.monthNum; i++) {\n        mm = month + i;\n        if (month + i > 11) {\n          yy = year + 1;\n          mm = month + i - 12;\n        }\n\n        let minPrice = this.getMinPrice(yy, mm);\n        let minPriceTxt =\n          minPrice === '无团期' ? '无团期' : `&yen;${minPrice}起`;\n\n        html += `<li data-year=\"${yy}\" data-month=\"${mm + 1}\" class=\"item \n          ${i === index ? 'active' : ''}\">\n          <p class=\"month\">${yy}年${mm + 1}月</p>\n          <p class=\"${\n            minPrice === '无团期' ? 'none' : 'price'\n          }\">${minPriceTxt}</p>\n        </li>`;\n      }\n      return html;\n    }\n    getCalWeek() {\n      const weekCn = ['日', '一', '二', '三', '四', '五', '六'];\n      let html = '';\n\n      for (let i = 0; i < weekCn.length; i++) {\n        html += `<li>${weekCn[i]}</li>`;\n      }\n      return html;\n    }\n    toNumText(num) {\n      const options = this.$options;\n      if (options.defineNumText) {\n        return options.defineNumText;\n      } else if (num >= options.maxNum) {\n        return options.maxNumText;\n      } else {\n        return '余：' + num;\n      }\n      // return num < options.maxNum ? '余：' + num : options.maxNumText;\n    }\n    isDisabled(date) {\n      const disableDates = this.$options.disableDates;\n\n      if (getType(disableDates) === 'array') {\n        if (disableDates.length === 0) return false;\n        const dates = disableDates.map(curVal => format(curVal));\n        return dates.indexOf(date) === -1 ? false : true;\n      } else {\n        const dateTime = new Date(date).getTime();\n\n        const start = disableDates.start\n          ? new Date(format(disableDates.start)).getTime()\n          : new Date().getTime();\n        const end = disableDates.end\n          ? new Date(format(disableDates.end)).getTime()\n          : new Date().getTime();\n        if (end - start <= 0) {\n          console.warn('disableDates的start日期不能大于end日期');\n          return false;\n        } else {\n          return dateTime >= start && dateTime <= end ? true : false;\n        }\n      }\n    }\n    // 获取数组中的最低价\n    getMinPrice(year, month, date) {\n      // 获取指定日期最低价格\n      if (date) return this.getPlanDateData(year, month, date)[0];\n      // 获取指定月最低价格\n      if (this.$data.length === 0) return '无团期';\n      // 根据年月日过滤数据\n      const filterData = this.$data.filter(curVal => {\n        return (\n          +curVal.date.split('/')[0] === year &&\n          +curVal.date.split('/')[1] === month + 1\n        );\n      });\n      // 返回已过滤数组中的最小价格\n      return filterData.length !== 0\n        ? filterData\n            .map(curVal => {\n              return curVal.price;\n            })\n            .sort((min, max) => {\n              return min - max;\n            })[0]\n        : '无团期';\n    }\n    getStart(type) {\n      const time = new Date();\n      const startTime = new Date(\n        time.getFullYear(),\n        time.getMonth(),\n        time.getDate()\n      ).getTime();\n      if (this.$options.startByData) {\n      }\n    }\n    isToday(year, month, date) {\n      const t = new Date();\n      return new Date(year, month, date).getTime() ===\n        new Date(t.getFullYear(), t.getMonth(), t.getDate()).getTime()\n        ? '今天'\n        : date;\n    }\n  }\n  // 数字小于10追加 0\n  function appendZero(num) {\n    return num >= 10 ? num : '0' + num;\n  }\n  // 格式化日期, date 日期对象|时间戳|日期字符串，rule 结果日期格式如yyyy-mm-dd\n  function format(date, rule) {\n    const d = getType(date) === 'date' ? date : new Date(date);\n    const r = rule ? rule : 'yyyy/mm/dd';\n    const yyyy = d.getFullYear();\n    const mm = appendZero(d.getMonth() + 1);\n    const dd = appendZero(d.getDate());\n    const seps = r.match(/[-/\\s年月日]/g);\n\n    return `${yyyy}${seps[0]}${mm}${seps[1]}${dd}${seps[2] ? seps[2] : ''}`;\n  }\n  // 判断是否为元素节点\n  function isNodeElement(node) {\n    return node.nodeType === 1;\n  }\n  // 获取数据类型\n  function getType(obj) {\n    const obj2Str = Object.prototype.toString;\n    if (obj2Str.call(obj) === '[object Array]') {\n      return 'array';\n    } else if (obj2Str.call(obj) === '[object Object]') {\n      return 'object';\n    } else if (obj2Str.call(obj) === '[object Date]') {\n      return 'date';\n    }\n  }\n  // 遍历赋值对象, obj1 默认对象，obj2 赋值对象\n  function mapAssignObj(obj1, obj2) {\n    for (let i in obj1) {\n      if (typeof obj2[i] === 'undefined') {\n        obj2[i] = obj1[i];\n      } else if (getType(obj2[i]) === 'object') {\n        mapAssignObj(obj1[i], obj2[i]);\n      }\n    }\n    return obj2;\n  }\n  function hasClass(el, cls) {\n    return el.className.includes(cls);\n  }\n  function addClass(el, cls) {\n    if (!hasClass(el, cls)) {\n      el.className += ' ' + cls;\n    }\n  }\n  function removeClass(el, cls) {\n    if (hasClass(el, cls)) {\n      const re = new RegExp(`(\\\\s|^)${cls}`);\n      el.className = el.className.replace(re, '');\n    }\n  }\n  function getTargetNode(node, parent, selector) {\n    if (node.parentNode === parent) {\n      if (\n        node.nodeName.toLowerCase() === selector ||\n        node.className.includes(selector.substring(1)) ||\n        node.id.includes(selector.substring(1))\n      ) {\n        return node;\n      }\n      return null;\n    }\n    return node.parentNode !== parent\n      ? getTargetNode(node.parentNode, parent, selector)\n      : null;\n  }\n\n  return PlanCalendar;\n});\n"]}