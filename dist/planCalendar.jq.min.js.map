{"version":3,"sources":["planCalendar.jq.js"],"names":["root","factory","define","amd","exports","_typeof","module","require","PlanCalendar","jQuery","$","_this","this","options","arguments","length","undefined","_classCallCheck","defaults","sellOutText","maxNum","maxNumText","onSelect","elem","dataIndex","initTips","monthNum","i","isTips","j","dateItem","data","markDates","map","curVal","key","date","selectedDate","$cal","html","formatDate","$calDate","children","weekCn","now","Date","_ref","getFullYear","getDate","y","getCalDate","m","d","$calMonth","on","siblings","index","yy","mm","that","getCalMonth","_createClass","value","indexOf","t","getMonth","join","days","year","month","prices","filter","split","parseInt","minPrice","price","sort","a","b","$item","_this2","curDate","priceHtml","op","repeatDates","uniqueData","dates","toNumTxt","number","forEach","planDate","push","addClass","attr","getEndDate","append","_this3","getDay","mNum","mHtml","nextMonthDate","startDate","endDate","monthDays","febDays","$calDateItem","calGridNum","removeAttr","renderCalDate","eq","renderPlanData","prevMonth","prevYear","nextYear","nextMonth","$curMonthItem","curMonth","obj","callback","$selectedItem","curData","next","click","prev"],"mappings":"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","file":"planCalendar.jq.min.js","sourcesContent":["(function(root, factory) {\n  if (typeof define === 'function' && define.amd) {\n    define([], factory);\n  } else if (typeof exports === 'object') {\n    module.exports = factory(require('jquery'));\n  } else {\n    root.PlanCalendar = factory(root.jQuery);\n  }\n})(this ? this : window, function($) {\n  class PlanCalendar {\n    constructor(elem, options = {}) {\n      const defaults = {\n        monthNum: 4, // Number 默认值 4，月份显示个数\n        sellOutText: '售罄', // String 默认值 '售罄'，余位为0时显示文字\n        isTips: false, // Boolean 默认值 false，是否显示提示层\n        maxNum: 20, // Number  默认值 20，大于等于指定余位显示 maxNumText 的值\n        maxNumText: '充足', // String  默认值 '充足'，配置大于等于指定余位显示文字\n        markDates: [], // Array  默认值 []， 格式化好的团期数据\n        onSelect: function(dateItem, dataIndex) {\n          // 选择团期之后的回调，dateItem：选中日期项, data[Array]: 团期数据\n        },\n        initTips: function(dataIndex) {\n          // 初始化tips文档内容，data: 选中日期的团期数据，只选一个团期\n          // return String 文档内容\n        }\n      };\n      for (var i in defaults) {\n        if (typeof options[i] === 'undefined') {\n          options[i] = defaults[i];\n        } else if (typeof options[i] === 'object') {\n          for (var j in options[i]) {\n            if (typeof options[i][j] === 'undefined') {\n              options[i][j] = defaults[i][j];\n            }\n          }\n        }\n      }\n\n      this.options = options;\n      this.data = this.options.markDates.map(curVal => {\n        // 格式化出团日期\n        for (let key in curVal) {\n          if (key === 'date') {\n            curVal[key] = this.formatDate(curVal.date);\n          }\n        }\n        return curVal;\n      });\n      this.options.monthNum =\n        this.options.monthNum > 11 ? 11 : this.options.monthNum; // 选项卡个数不能超过11个\n      // 已选日期\n      this.selectedDate = undefined;\n      // 日历dom结构\n      this.$cal = $(elem);\n      this.$cal.html(\n        '<ul class=\"calendar-month\"> </ul> <ul class=\"calendar-week\"> <li>日</li> <li>一</li> <li>二</li> <li>三</li> <li>四</li> <li>五</li> <li>六</li> </ul> <ul class=\"calendar-date\"> </ul>'\n      );\n      this.$calMonth = this.$cal.children('.calendar-month');\n      this.$calDate = this.$cal.children('.calendar-date');\n      this.weekCn = ['日', '一', '二', '三', '四', '五', '六'];\n      // 获取当前时间\n      const now = new Date();\n      const [y, m, d] = [now.getFullYear(), now.getMonth(), now.getDate()];\n\n      this.getCalMonth(y, m, this.options.monthNum);\n      this.getCalDate(y, m, d);\n\n      const that = this;\n      this.$calMonth.on('click', 'li', function() {\n        $(this)\n          .addClass('active')\n          .siblings()\n          .removeClass('active');\n        let index = $(this).index();\n        let yy = m + index > 11 ? y + 1 : y;\n        let mm = m + index > 11 ? m - 12 + index : m + index;\n        that.getCalDate(yy, mm);\n      });\n      this.$calDate.on('click', 'li.enabled', function() {\n        that.selectCalDate(this, that.options.onSelect);\n      });\n    }\n    /**\n     * 格式化化日\n     * 统一返回： YY-MM-DD\n     */\n    formatDate(...date) {\n      if (\n        typeof date[0] === 'string' &&\n        date[0].indexOf('-') !== -1 &&\n        date[0].length === 8\n      ) {\n        return date[0];\n      }\n      const t =\n        date.length === 3\n          ? new Date(date[0], date[1], date[2])\n          : new Date(date[0]);\n      let m =\n        t.getMonth() + 1 < 10 ? '0' + (t.getMonth() + 1) : t.getMonth() + 1;\n      let d = t.getDate() < 10 ? '0' + t.getDate() : t.getDate();\n      const dates = [t.getFullYear(), m, d];\n\n      return dates.join('-');\n    }\n    /**\n     * 获取指定日期指定天数之后的结束日期\n     * @param {* string} date 开始日期 yy-mm-dd\n     * @param {* number} days 天数\n     */\n    getEndDate(date, days) {\n      const t = new Date(date);\n      return this.formatDate(t.getFullYear(), t.getMonth(), t.getDate() + days);\n    }\n    /**\n     * 获取指定月下在团期数据中的价格最小值，\n     * 若该月无团则显示为“无团期”\n     */\n    getMinPrice(year, month) {\n      if (this.data.length === 0) {\n        return '<p class=\"none\">无团期</p>';\n      }\n      const prices = this.data.filter(curVal => {\n        return (\n          curVal.date.split('-')[0] == year &&\n          parseInt(curVal.date.split('-')[1]) == month\n        );\n      });\n      if (prices.length === 0) {\n        return '<p class=\"none\">无团期</p>';\n      }\n      const minPrice = prices\n        .map(curVal => {\n          return curVal.price;\n        })\n        .sort((a, b) => {\n          return a - b;\n        })[0];\n\n      let priceHtml = minPrice\n        ? `<p class=\"price\">&yen;${minPrice}起</p>`\n        : `<p class=\"price\">未设置</p>`;\n      return priceHtml;\n    }\n    /**\n     * 渲染日期项中的团期数据\n     * @param {* object}  jQuery 对象，日历表格项\n     * @param {* number} year 当前年份\n     * @param {* number} month 当前月份\n     * @param {* number} date 当前日期\n     */\n    renderPlanData($item, year, month, date) {\n      let curDate = this.formatDate(year, month, date);\n      const op = this.options;\n      const toNumTxt = number => {\n        if (number < op.maxNum) {\n          return '余：' + number;\n        } else if (number >= op.maxNum) {\n          return op.maxNumText;\n        } else {\n          return '';\n        }\n      };\n      const repeatDates = []; // 存储被移除的重复日期\n      const uniqueData = []; // 存储被去重后的数据\n      const dates = []; // 创建一个中间数组存储日期\n      // 先按照余位数量从大到小对数组进行排序，\n      // 使数组去重将取余位最大的数据\n      this.data\n        .sort((a, b) => {\n          return b.number - a.number;\n        })\n        .forEach(curVal => {\n          let planDate = curVal.date;\n          if (dates.indexOf(planDate) === -1) {\n            dates.push(planDate);\n            uniqueData.push(curVal);\n          } else {\n            repeatDates.push(curVal.date);\n          }\n        });\n      // 输出对应日期的团期数据\n      uniqueData.forEach((curVal, i) => {\n        let planDate = curVal.date;\n        if (planDate === curDate) {\n          let priceHtml =\n            typeof curVal.price === 'undefined'\n              ? ''\n              : `<p class=\"price\">&yen;${curVal.price}起</p>`;\n          let dataHtml = `${priceHtml}<p class=\"number\">${toNumTxt(\n            curVal.number\n          )}</p>`;\n\n          $item\n            .addClass('enabled')\n            .attr('data-start', planDate)\n            .attr('data-end', this.getEndDate(curVal.date, curVal.days))\n            .append(dataHtml);\n          if (planDate === this.selectedDate) {\n            $item.addClass('selected');\n          }\n          if (repeatDates.indexOf(curDate) !== -1) {\n            $item.append(`<i class=\"badge\">多团</i>`);\n          }\n          if (typeof curVal.number !== 'undefined' && curVal.number === 0) {\n            $item.append(`<i class=\"badge\">${this.options.sellOutText}</i>`);\n          }\n          if (\n            this.options.isTips &&\n            this.options.initTips !== 'undefined' &&\n            !$item.hasClass('invalid')\n          ) {\n            $item.append(this.options.initTips(curVal));\n          }\n        }\n      });\n    }\n    /**\n     * 渲染网格中的日期\n     * @param {* object}  jQuery 对象，日历表格项\n     * @param {* number} year 当前年份\n     * @param {* number} month 当前月份\n     * @param {* number} date 当前日期\n     */\n    renderCalDate($item, year, month, date) {\n      $item\n        .attr('data-date', () => {\n          return this.formatDate(year, month, date);\n        })\n        .attr('data-week', () => {\n          return this.weekCn[new Date(year, month, date).getDay()];\n        })\n        .html(`<p class=\"date\">${date}</p>`);\n    }\n    /**\n     * 获取指定年配置的所有月份\n     * @param {* number} year 当前年份\n     * @param {* number} month 当前月份\n     * @param {* number} mNum 月份选项卡数量\n     */\n    getCalMonth(year, month, mNum) {\n      let mHtml = '';\n      for (let i = 0; i < mNum; i++) {\n        if (month + i > 11) {\n          //\n          year++;\n          month = -i;\n        }\n        let m = month + 1 + i;\n        mHtml += `<li data-year=\"${year}\"  data-month=\"${m}\" class=\"${\n          i === 0 ? 'active' : ''\n        }\"><p class=\"month\">${year}年${m}月</p>${this.getMinPrice(\n          year,\n          m\n        )}</li>`;\n      }\n      this.$calMonth.html(mHtml);\n    }\n    /**\n     * 获取指定年月所有日期，以及部分上下月日期\n     * @param {* number} year 当前年份\n     * @param {* number} month 当前月份\n     * @param {* number} date 当前日期，默认值=1\n     */\n    getCalDate(year, month, date) {\n      let data = this.data;\n      let now = new Date();\n      let y = year;\n      let m = month;\n      let d = date ? date : now.getDate();\n      let febDays = (y % 4 == 0 && y % 100 != 0) || y % 400 == 0 ? 29 : 28; //闰年二月份天数\n      const monthDays = [31, febDays, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\n      const calGridNum = 42; //日历网格个数\n      let nextMonthDate = 0; //下一个月的日期\n      let startDate = new Date(y, m, 1).getDay(); //当月第一天\n      let endDate = startDate + monthDays[m]; //当月最后一天\n      // 初始化日期表格\n      this.$calDate.html('');\n      for (let i = 0; i < calGridNum; i++) {\n        this.$calDate.append('<li></li>');\n      }\n      let $calDateItem = this.$calDate.children('li');\n      $calDateItem.removeAttr('class');\n      for (let i = 0; i < calGridNum; i++) {\n        // 显示当月\n        if (i >= startDate && i < endDate) {\n          let curDate = i - (startDate - 1);\n          // 日期插入网格中\n          this.renderCalDate($calDateItem.eq(i), y, m, curDate);\n          this.renderPlanData($calDateItem.eq(i), y, m, curDate);\n          // 显示今天\n          if (\n            y === now.getFullYear() &&\n            m === now.getMonth() &&\n            d === curDate\n          ) {\n            $calDateItem\n              .eq(i)\n              .addClass('today')\n              .children('.date')\n              .html('今天');\n          }\n        } else if (i < startDate) {\n          // 显示上月\n          let prevMonth = m === 0 ? 11 : m - 1; // 跨年时，当m=0时, prevMonth=11;\n          let prevYear = m === 0 ? y - 1 : y; // 跨年时，当m=0时, prevYear=y-1;\n\n          for (\n            let j = monthDays[prevMonth];\n            j > monthDays[prevMonth] - startDate;\n            j--\n          ) {\n            if (i === monthDays[prevMonth] - j) {\n              let curDate = monthDays[prevMonth] - (startDate - 1 - i); // 获取当天日期\n              $calDateItem.eq(i).addClass('invalid');\n              // 日期插入网格中\n              this.renderCalDate(\n                $calDateItem.eq(i),\n                prevYear,\n                prevMonth,\n                curDate\n              );\n              // 输出对应日期的团期数据\n              this.renderPlanData(\n                $calDateItem.eq(i),\n                prevYear,\n                prevMonth,\n                curDate\n              );\n              break;\n            }\n          }\n        } else {\n          let nextMonth = m === 11 ? 0 : m + 1;\n          let nextYear = m === 11 ? y + 1 : y;\n          let curDate = ++nextMonthDate; // 获取当天日期\n\n          $calDateItem.eq(i).addClass('invalid');\n          // 日期插入网格中\n          this.renderCalDate($calDateItem.eq(i), nextYear, nextMonth, curDate);\n          // 输出对应日期的团期数据\n          this.renderPlanData($calDateItem.eq(i), nextYear, nextMonth, curDate);\n        }\n      }\n    }\n    /**\n     *\n     * @param {* object} obj dom 对象\n     * @param {* function } callback 回调，参数：dateItem 已选日期项；dataIndex： 团期数据索引\n     */\n    selectCalDate(obj, callback) {\n      let curDate = $(obj).attr('data-date');\n      let $curMonthItem = this.$calMonth.children('li.active');\n      let curMonth = $curMonthItem.attr('data-month') - 1;\n      let prevMonth = curMonth === 0 ? 11 : curMonth - 1;\n      let nextMonth = curMonth === 11 ? 0 : curMonth + 1;\n\n      $(obj)\n        .addClass('selected')\n        .siblings()\n        .removeClass('selected');\n      this.selectedDate = curDate;\n\n      const curData = this.data.filter((curVal, i) => {\n        if (curVal.date === curDate) {\n          // 判断所选日期是否为当月、上月或下月\n          if (new Date(curVal.date).getMonth() === nextMonth) {\n            $curMonthItem.next().click();\n          } else if (new Date(curVal.date).getMonth() === prevMonth) {\n            $curMonthItem.prev().click();\n          }\n        }\n        return curVal.date === curDate;\n      });\n      // 初始化日期dom后重新获取已选日期\n      let $selectedItem = this.$calDate.children('li.selected');\n\n      if (typeof callback === 'function') {\n        callback($selectedItem, curData);\n      }\n    }\n  }\n  return PlanCalendar;\n});\n"]}